// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: doc.flex

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;
import java.util.Stack;

public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xTYPE_REF = 12;
  public static final int xCLASS = 14;
  public static final int xCLASS_EXTEND = 16;
  public static final int xFIELD = 18;
  public static final int xFIELD_ID = 20;
  public static final int xGENERIC = 22;
  public static final int xALIAS = 24;
  public static final int xSUPPRESS = 26;
  public static final int xDOUBLE_QUOTED_STRING = 28;
  public static final int xSINGLE_QUOTED_STRING = 30;
  public static final int xSWAG_TAGS = 32;
  public static final int xSWAG_PARAMS = 34;
  public static final int xSWAG_SUMMARY = 36;
  public static final int xSWAG_QUERY_TYPE = 38;
  public static final int xSWAG_QUERY_TY = 40;
  public static final int xSWAG_QUERY_OPTIONAL = 42;
  public static final int xSWAG_ROUTER = 44;
  public static final int xSWAG_DES = 46;
  public static final int xSWAG_SIGN = 48;
  public static final int xSWAG_METHOD = 50;
  public static final int xSWAG_RESPONSE = 52;
  public static final int xSWAG_RESPONSE_TYPE = 54;
  public static final int xSWAG_RESPONSE_TY = 56;
  public static final int xSWAG_COMON_NOTE = 58;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 16, 16, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\5\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\2\5\1\16\1\17\1\20\1\12\1\21"+
    "\5\22\4\21\1\23\1\5\1\24\1\12\1\25\1\12"+
    "\1\26\3\27\1\30\13\27\1\31\1\27\1\32\1\33"+
    "\1\34\6\27\1\35\1\36\1\37\1\5\1\40\1\5"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\40\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\2\40\1\66"+
    "\1\40\1\67\1\70\1\71\1\5\6\0\1\72\32\0"+
    "\1\73\1\5\4\11\4\5\1\11\2\5\1\0\7\5"+
    "\1\11\4\5\1\11\5\5\27\11\1\5\37\11\1\5"+
    "\u01ca\11\4\5\14\11\16\5\5\11\7\5\1\11\1\5"+
    "\1\11\21\5\160\0\5\11\1\5\2\11\2\5\4\11"+
    "\1\5\1\11\6\5\1\11\1\5\3\11\1\5\1\11"+
    "\1\5\24\11\1\5\123\11\1\5\213\11\1\5\5\0"+
    "\2\5\246\11\1\5\46\11\2\5\1\11\6\5\51\11"+
    "\6\5\1\11\1\5\55\0\1\5\1\0\1\5\2\0"+
    "\1\5\2\0\1\5\1\0\10\5\33\11\4\5\4\11"+
    "\15\5\6\0\5\5\1\11\4\5\13\0\1\5\1\0"+
    "\3\5\53\11\37\0\4\5\2\11\1\0\143\11\1\5"+
    "\1\11\10\0\1\5\6\0\2\11\2\0\1\5\4\0"+
    "\2\11\12\0\3\11\2\5\1\11\17\5\1\0\1\11"+
    "\1\0\36\11\33\0\2\5\131\11\13\0\1\11\16\5"+
    "\12\0\41\11\11\0\2\11\4\5\1\11\2\5\1\0"+
    "\30\11\4\0\1\11\11\0\1\11\3\0\1\11\5\0"+
    "\22\5\31\11\3\0\4\5\13\11\65\5\25\11\1\5"+
    "\22\11\13\5\61\0\66\11\3\0\1\11\22\0\1\11"+
    "\7\0\12\11\2\0\2\5\12\0\1\5\20\11\3\0"+
    "\1\5\10\11\2\5\2\11\2\5\26\11\1\5\7\11"+
    "\1\5\1\11\3\5\4\11\2\5\1\0\1\11\7\0"+
    "\2\5\2\0\2\5\3\0\1\11\10\5\1\0\4\5"+
    "\2\11\1\5\3\11\2\0\2\5\12\0\4\11\7\5"+
    "\2\11\1\5\1\0\2\5\3\0\1\5\6\11\4\5"+
    "\2\11\2\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\2\11\1\5\2\11\2\5\1\0\1\5\5\0\4\5"+
    "\2\0\2\5\3\0\3\5\1\0\7\5\4\11\1\5"+
    "\1\11\7\5\14\0\3\11\1\0\13\5\3\0\1\5"+
    "\11\11\1\5\3\11\1\5\26\11\1\5\7\11\1\5"+
    "\2\11\1\5\5\11\2\5\1\0\1\11\10\0\1\5"+
    "\3\0\1\5\3\0\2\5\1\11\17\5\2\11\2\0"+
    "\2\5\12\0\1\5\1\11\7\5\1\11\6\0\1\5"+
    "\3\0\1\5\10\11\2\5\2\11\2\5\26\11\1\5"+
    "\7\11\1\5\2\11\1\5\5\11\2\5\1\0\1\11"+
    "\7\0\2\5\2\0\2\5\3\0\7\5\3\0\4\5"+
    "\2\11\1\5\3\11\2\0\2\5\12\0\1\5\1\11"+
    "\20\5\1\0\1\11\1\5\6\11\3\5\3\11\1\5"+
    "\4\11\3\5\2\11\1\5\1\11\1\5\2\11\3\5"+
    "\2\11\3\5\3\11\3\5\14\11\4\5\5\0\3\5"+
    "\3\0\1\5\4\0\2\5\1\11\6\5\1\0\16\5"+
    "\12\0\11\5\1\11\6\5\5\0\10\11\1\5\3\11"+
    "\1\5\27\11\1\5\20\11\3\5\1\11\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\1\5\3\11\5\5"+
    "\2\11\2\0\2\5\12\0\20\5\1\11\3\0\1\5"+
    "\10\11\1\5\3\11\1\5\27\11\1\5\12\11\1\5"+
    "\5\11\2\5\1\0\1\11\7\0\1\5\3\0\1\5"+
    "\4\0\7\5\2\0\7\5\1\11\1\5\2\11\2\0"+
    "\2\5\12\0\1\5\2\11\15\5\4\0\11\11\1\5"+
    "\3\11\1\5\51\11\2\0\1\11\7\0\1\5\3\0"+
    "\1\5\4\0\1\11\5\5\3\11\1\0\7\5\3\11"+
    "\2\0\2\5\12\0\12\5\6\11\1\5\3\0\1\5"+
    "\22\11\3\5\30\11\1\5\11\11\1\5\1\11\2\5"+
    "\7\11\3\5\1\0\4\5\6\0\1\5\1\0\1\5"+
    "\10\0\6\5\12\0\2\5\2\0\15\5\60\11\1\0"+
    "\2\11\7\0\4\5\10\11\10\0\1\5\12\0\47\5"+
    "\2\11\1\5\1\11\1\5\5\11\1\5\30\11\1\5"+
    "\1\11\1\5\12\11\1\0\2\11\11\0\1\11\2\5"+
    "\5\11\1\5\1\11\1\5\6\0\2\5\12\0\2\5"+
    "\4\11\40\5\1\11\27\5\2\0\6\5\12\0\13\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\2\0\10\11"+
    "\1\5\44\11\4\5\24\0\1\5\2\0\5\11\13\0"+
    "\1\5\44\0\11\5\1\0\71\5\53\11\24\0\1\11"+
    "\12\0\6\5\6\11\4\0\4\11\3\0\1\11\3\0"+
    "\2\11\7\0\3\11\4\0\15\11\14\0\1\11\17\0"+
    "\2\5\46\11\1\5\1\11\5\5\1\11\2\5\53\11"+
    "\1\5\115\11\1\5\4\11\2\5\7\11\1\5\1\11"+
    "\1\5\4\11\2\5\51\11\1\5\4\11\2\5\41\11"+
    "\1\5\4\11\2\5\7\11\1\5\1\11\1\5\4\11"+
    "\2\5\17\11\1\5\71\11\1\5\4\11\2\5\103\11"+
    "\2\5\3\0\40\5\20\11\20\5\126\11\2\5\6\11"+
    "\3\5\u016c\11\2\5\21\11\1\73\32\11\5\5\113\11"+
    "\3\5\13\11\7\5\15\11\1\5\4\11\3\0\13\5"+
    "\22\11\3\0\13\5\22\11\2\0\14\5\15\11\1\5"+
    "\3\11\1\5\2\0\14\5\64\11\40\0\3\5\1\11"+
    "\3\5\2\11\1\0\2\5\12\0\41\5\4\0\1\5"+
    "\12\0\6\5\131\11\7\5\5\11\2\0\42\11\1\0"+
    "\1\11\5\5\106\11\12\5\37\11\1\5\14\0\4\5"+
    "\14\0\12\5\12\0\36\11\2\5\5\11\13\5\54\11"+
    "\4\5\32\11\6\5\12\0\46\5\27\11\5\0\4\5"+
    "\65\11\12\0\1\5\35\0\2\5\13\0\6\5\12\0"+
    "\15\5\1\11\10\5\16\0\1\5\2\0\77\5\5\0"+
    "\57\11\21\0\7\11\4\5\12\0\21\5\11\0\14\5"+
    "\3\0\36\11\15\0\2\11\12\0\54\11\16\0\14\5"+
    "\44\11\24\0\10\5\12\0\3\5\3\11\12\0\44\11"+
    "\2\5\11\11\7\5\53\11\2\5\3\11\20\5\3\0"+
    "\1\5\25\0\4\11\1\0\6\11\1\0\2\11\3\0"+
    "\1\11\5\5\300\11\72\0\1\5\5\0\26\11\2\5"+
    "\6\11\2\5\46\11\2\5\6\11\2\5\10\11\1\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\37\11\2\5"+
    "\65\11\1\5\7\11\1\5\1\11\3\5\3\11\1\5"+
    "\7\11\3\5\4\11\2\5\6\11\4\5\15\11\5\5"+
    "\3\11\1\5\7\11\3\5\13\73\5\0\30\5\2\3"+
    "\5\0\1\73\17\5\2\11\23\5\1\11\12\5\1\73"+
    "\5\0\1\5\12\0\1\5\1\11\15\5\1\11\20\5"+
    "\15\11\3\5\40\11\20\5\15\0\4\5\1\0\3\5"+
    "\14\0\21\5\1\11\4\5\1\11\2\5\12\11\1\5"+
    "\1\11\3\5\5\11\6\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\4\11\1\5\13\11\2\5\4\11\5\5"+
    "\5\11\4\5\1\11\21\5\51\11\u0177\5\57\11\1\5"+
    "\57\11\1\5\205\11\6\5\4\11\3\0\2\11\14\5"+
    "\46\11\1\5\1\11\5\5\1\11\2\5\70\11\7\5"+
    "\1\11\17\5\1\0\27\11\11\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\40\0\57\5\1\11"+
    "\320\5\1\73\4\5\3\11\31\5\11\11\6\0\1\5"+
    "\5\11\2\5\5\11\4\5\126\11\2\5\2\0\2\5"+
    "\3\11\1\5\132\11\1\5\4\11\5\5\53\11\1\5"+
    "\136\11\21\5\40\11\60\5\320\11\100\5\375\11\3\5"+
    "\215\11\103\5\56\11\2\5\15\11\3\5\20\11\12\0"+
    "\2\11\24\5\57\11\1\0\4\5\12\0\1\5\37\11"+
    "\2\0\120\11\2\0\45\5\11\11\2\5\147\11\2\5"+
    "\65\11\2\5\11\11\52\5\15\11\1\0\3\11\1\0"+
    "\4\11\1\0\27\11\5\0\4\5\1\0\13\5\1\11"+
    "\7\5\64\11\14\5\2\0\62\11\22\0\12\5\12\0"+
    "\6\5\22\0\6\11\3\5\1\11\1\5\2\11\13\0"+
    "\34\11\10\0\2\5\27\11\15\0\14\5\35\11\3\5"+
    "\4\0\57\11\16\0\16\5\1\11\12\0\6\5\5\11"+
    "\1\0\12\11\12\0\5\11\1\5\51\11\16\0\11\5"+
    "\3\11\1\0\10\11\2\0\2\5\12\0\6\5\27\11"+
    "\3\5\1\11\3\0\62\11\1\0\1\11\3\0\2\11"+
    "\2\0\5\11\2\0\1\11\1\0\1\11\30\5\3\11"+
    "\2\5\13\11\5\0\2\5\3\11\2\0\12\5\6\11"+
    "\2\5\6\11\2\5\6\11\11\5\7\11\1\5\7\11"+
    "\1\5\53\11\1\5\16\11\6\5\163\11\10\0\1\5"+
    "\2\0\2\5\12\0\6\5\244\11\14\5\27\11\4\5"+
    "\61\11\4\5\u0100\74\156\11\2\5\152\11\46\5\7\11"+
    "\14\5\5\11\5\5\1\11\1\0\12\11\1\5\15\11"+
    "\1\5\5\11\1\5\1\11\1\5\2\11\1\5\2\11"+
    "\1\5\154\11\41\5\153\11\22\5\100\11\2\5\66\11"+
    "\50\5\15\11\3\5\20\0\20\5\20\0\3\5\2\11"+
    "\30\5\3\11\31\5\1\11\6\5\5\11\1\5\207\11"+
    "\2\5\1\0\4\5\1\11\13\5\12\0\7\5\32\11"+
    "\4\5\1\11\1\5\32\11\13\5\131\11\3\5\6\11"+
    "\2\5\6\11\2\5\6\11\2\5\3\11\3\5\2\11"+
    "\3\5\2\11\22\5\3\0\4\5\14\11\1\5\32\11"+
    "\1\5\23\11\1\5\2\11\1\5\17\11\2\5\16\11"+
    "\42\5\173\11\105\5\65\11\210\5\1\0\202\5\35\11"+
    "\3\5\61\11\17\5\1\0\37\5\40\11\15\5\36\11"+
    "\5\5\46\11\5\0\5\5\36\11\2\5\44\11\4\5"+
    "\10\11\1\5\5\11\52\5\236\11\2\5\12\0\6\5"+
    "\44\11\4\5\44\11\4\5\50\11\10\5\64\11\234\5"+
    "\67\11\11\5\26\11\12\5\10\11\230\5\6\11\2\5"+
    "\1\11\1\5\54\11\1\5\2\11\3\5\1\11\2\5"+
    "\27\11\12\5\27\11\11\5\37\11\101\5\23\11\1\5"+
    "\2\11\12\5\26\11\12\5\32\11\106\5\70\11\6\5"+
    "\2\11\100\5\1\11\3\0\1\5\2\0\5\5\4\0"+
    "\4\11\1\5\3\11\1\5\35\11\2\5\3\0\4\5"+
    "\1\0\40\5\35\11\3\5\35\11\43\5\10\11\1\5"+
    "\34\11\2\0\31\5\66\11\12\5\26\11\12\5\23\11"+
    "\15\5\22\11\156\5\111\11\67\5\63\11\15\5\63\11"+
    "\15\5\44\11\4\0\10\5\12\0\u0146\5\52\11\1\5"+
    "\2\0\3\5\2\11\116\5\35\11\12\5\1\11\10\5"+
    "\26\11\13\0\137\5\25\11\33\5\27\11\11\5\3\0"+
    "\65\11\17\0\37\5\12\0\17\5\4\0\55\11\13\0"+
    "\2\5\1\0\17\5\1\0\2\5\31\11\7\5\12\0"+
    "\6\5\3\0\44\11\16\0\1\5\12\0\4\5\1\11"+
    "\2\0\1\11\10\5\43\11\1\0\2\5\1\11\11\5"+
    "\3\0\60\11\16\0\4\11\4\5\4\0\1\5\14\0"+
    "\1\11\1\5\1\11\43\5\22\11\1\5\31\11\14\0"+
    "\6\5\1\0\101\5\7\11\1\5\1\11\1\5\4\11"+
    "\1\5\17\11\1\5\12\11\7\5\57\11\14\0\5\5"+
    "\12\0\6\5\4\0\1\5\10\11\2\5\2\11\2\5"+
    "\26\11\1\5\7\11\1\5\2\11\1\5\5\11\1\5"+
    "\2\0\1\11\7\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\11\6\5\1\0\5\5\5\11\2\0\2\5\7\0"+
    "\3\5\5\0\213\5\65\11\22\0\4\11\5\5\12\0"+
    "\4\5\1\0\3\11\36\5\60\11\24\0\2\11\1\5"+
    "\1\11\10\5\12\0\246\5\57\11\7\0\2\5\11\0"+
    "\27\5\4\11\2\0\42\5\60\11\21\0\3\5\1\11"+
    "\13\5\12\0\46\5\53\11\15\0\1\11\7\5\12\0"+
    "\66\5\33\11\2\5\17\0\4\5\12\0\306\5\54\11"+
    "\17\0\145\5\100\11\12\0\25\5\10\11\2\5\1\11"+
    "\2\5\10\11\1\5\2\11\1\5\30\11\6\0\1\5"+
    "\2\0\2\5\4\0\1\11\1\0\1\11\2\0\14\5"+
    "\12\0\106\5\10\11\2\5\47\11\7\0\2\5\7\0"+
    "\1\11\1\5\1\11\1\0\33\5\1\11\12\0\50\11"+
    "\7\0\1\11\4\0\10\5\1\0\10\5\1\11\13\0"+
    "\56\11\20\0\3\5\1\11\42\5\71\11\7\5\11\11"+
    "\1\5\45\11\10\0\1\5\10\0\1\11\17\5\12\0"+
    "\30\5\36\11\2\5\26\0\1\5\16\0\111\5\7\11"+
    "\1\5\2\11\1\5\46\11\6\0\3\5\1\0\1\5"+
    "\2\0\1\5\7\0\1\11\1\0\10\5\12\0\6\5"+
    "\6\11\1\5\2\11\1\5\40\11\5\0\1\5\2\0"+
    "\1\5\5\0\1\11\7\5\12\0\u0136\5\23\11\4\0"+
    "\271\5\1\11\54\5\4\11\37\5\232\11\146\5\157\11"+
    "\21\5\304\11\274\5\57\11\1\5\11\0\307\5\107\11"+
    "\271\5\71\11\7\5\37\11\1\5\12\0\146\5\36\11"+
    "\2\5\5\0\13\5\60\11\7\0\11\5\4\11\14\5"+
    "\12\0\11\5\25\11\5\5\23\11\260\5\100\11\200\5"+
    "\113\11\4\5\1\0\1\11\67\0\7\5\4\0\15\11"+
    "\100\5\2\11\1\5\1\11\1\0\13\5\2\0\16\5"+
    "\370\11\10\5\326\11\52\5\11\11\367\5\37\11\61\5"+
    "\3\11\21\5\4\11\10\5\u018c\11\4\5\153\11\5\5"+
    "\15\11\3\5\11\11\7\5\12\11\3\5\2\0\1\5"+
    "\4\0\301\5\5\0\3\5\26\0\2\5\7\0\36\5"+
    "\4\0\224\5\3\0\273\5\125\11\1\5\107\11\1\5"+
    "\2\11\2\5\1\11\2\5\2\11\2\5\4\11\1\5"+
    "\14\11\1\5\1\11\1\5\7\11\1\5\101\11\1\5"+
    "\4\11\2\5\10\11\1\5\7\11\1\5\34\11\1\5"+
    "\4\11\1\5\5\11\1\5\1\11\3\5\7\11\1\5"+
    "\u0154\11\2\5\31\11\1\5\31\11\1\5\37\11\1\5"+
    "\31\11\1\5\37\11\1\5\31\11\1\5\37\11\1\5"+
    "\31\11\1\5\37\11\1\5\31\11\1\5\10\11\2\5"+
    "\151\0\4\5\62\0\10\5\1\0\16\5\1\0\26\5"+
    "\5\0\1\5\17\0\120\5\7\0\1\5\21\0\2\5"+
    "\7\0\1\5\2\0\1\5\5\0\325\5\55\11\3\5"+
    "\7\0\7\11\2\5\12\0\4\5\1\11\u0171\5\54\11"+
    "\16\0\5\5\306\11\13\5\7\0\51\5\104\11\7\0"+
    "\1\11\4\5\12\0\u0156\5\1\11\117\5\4\11\1\5"+
    "\33\11\1\5\2\11\1\5\1\11\2\5\1\11\1\5"+
    "\12\11\1\5\4\11\1\5\1\11\1\5\1\11\6\5"+
    "\1\11\4\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\3\11\1\5\2\11\1\5\1\11\2\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\2\11\1\5\1\11\2\5\4\11\1\5\7\11\1\5"+
    "\4\11\1\5\4\11\1\5\1\11\1\5\12\11\1\5"+
    "\21\11\5\5\3\11\1\5\5\11\1\5\21\11\u0134\5"+
    "\12\0\6\5\336\11\42\5\65\11\13\5\336\11\2\5"+
    "\u0182\11\16\5\u0131\11\37\5\36\11\342\5\113\11\266\5"+
    "\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\27\0\1\2\1\3\1\4\1\5\1\4"+
    "\1\2\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\23\16\1\1\1\3\1\17\1\5\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\25\1\26\1\5\2\20"+
    "\1\27\1\30\1\31\1\32\1\33\1\17\1\34\1\35"+
    "\1\36\2\37\1\40\1\41\5\5\1\42\1\43\2\5"+
    "\1\44\1\45\1\46\1\5\1\3\2\7\1\5\1\47"+
    "\1\50\2\5\1\51\1\52\1\53\1\54\27\16\2\0"+
    "\1\55\2\20\2\17\1\37\12\0\1\56\2\0\1\57"+
    "\2\0\24\16\1\60\3\16\1\17\1\20\1\61\1\20"+
    "\3\17\7\0\1\62\1\63\2\0\6\16\1\64\2\16"+
    "\1\65\13\16\1\66\1\16\1\20\3\17\1\67\2\0"+
    "\1\70\2\0\1\71\2\0\1\16\1\72\4\16\1\73"+
    "\1\74\1\75\4\16\1\76\6\16\1\20\3\17\2\0"+
    "\1\77\1\100\2\0\2\16\1\101\4\16\1\102\3\16"+
    "\1\103\1\104\1\16\1\105\1\106\2\17\1\107\1\0"+
    "\1\110\1\111\1\0\3\16\1\112\1\113\2\16\1\114"+
    "\2\16\1\115\1\17\2\0\1\16\1\116\1\117\1\120"+
    "\1\121\1\16\1\122\1\17\1\123\1\111\1\16\1\124"+
    "\1\125\1\16\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u06ac\0\u06ac"+
    "\0\u0726\0\u0763\0\u06ac\0\u06ac\0\u07a0\0\u06ac\0\u07dd\0\u06ac"+
    "\0\u06ac\0\u081a\0\u06ac\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\u0dd2\0\u06ac\0\u06ac\0\u06ac\0\u0e0f\0\u06ac"+
    "\0\u06ac\0\u06ac\0\u0e4c\0\u0e89\0\u0ec6\0\u06ac\0\u06ac\0\u06ac"+
    "\0\u0f03\0\u06ac\0\u0f40\0\u06ac\0\u06ac\0\u06ac\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u06ac\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u06ac\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u06ac\0\u0763\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u06ac\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u06ac\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u138a\0\u1ebd\0\u147e\0\u06ac"+
    "\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u0857\0\u2438"+
    "\0\u2475\0\u24b2\0\u06ac\0\u06ac\0\u0dd2\0\u24ef\0\u252c\0\u2569"+
    "\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751"+
    "\0\u278e\0\u06ac\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc"+
    "\0\u2939\0\u2976\0\u0857\0\u29b3\0\u29f0\0\u0857\0\u2a2d\0\u2a6a"+
    "\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52"+
    "\0\u2c8f\0\u0857\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u06ac"+
    "\0\u2dfd\0\u2e3a\0\u06ac\0\u2e77\0\u2eb4\0\u06ac\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u0857\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u0857\0\u0857"+
    "\0\u0857\0\u309c\0\u30d9\0\u3116\0\u3153\0\u0857\0\u3190\0\u31cd"+
    "\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5"+
    "\0\u33f2\0\u342f\0\u06ac\0\u06ac\0\u346c\0\u34a9\0\u34e6\0\u3523"+
    "\0\u0857\0\u3560\0\u359d\0\u35da\0\u3617\0\u0857\0\u3654\0\u3691"+
    "\0\u36ce\0\u0857\0\u0857\0\u370b\0\u0857\0\u0dd2\0\u3748\0\u3785"+
    "\0\u0d58\0\u37c2\0\u06ac\0\u147e\0\u37ff\0\u383c\0\u3879\0\u38b6"+
    "\0\u0857\0\u0857\0\u38f3\0\u3930\0\u0857\0\u396d\0\u39aa\0\u0d58"+
    "\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u0857\0\u0857\0\u0857\0\u0857"+
    "\0\u3adb\0\u0857\0\u3b18\0\u06ac\0\u06ac\0\u3b55\0\u0857\0\u0d58"+
    "\0\u3b92\0\u0857";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\1\37\1\40\1\41\1\35\1\36\10\35"+
    "\1\42\6\35\1\43\43\35\1\40\1\35\2\40\1\36"+
    "\1\44\1\40\1\45\1\40\1\36\1\40\1\46\1\47"+
    "\14\40\1\50\6\47\3\40\27\47\7\40\1\36\1\44"+
    "\1\40\1\45\1\40\1\36\1\51\1\40\1\52\1\40"+
    "\1\53\13\40\6\52\3\40\27\52\7\40\1\36\1\44"+
    "\1\40\1\45\1\40\1\36\2\40\1\54\15\40\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\3\40\1\54\1\62"+
    "\1\54\1\63\1\54\1\64\1\65\1\66\3\54\1\67"+
    "\1\70\1\54\1\71\1\72\1\54\1\73\1\74\1\75"+
    "\1\54\1\76\1\54\6\40\1\77\1\36\1\44\1\77"+
    "\1\45\1\77\1\100\66\77\1\40\1\36\1\44\1\40"+
    "\1\45\1\40\1\36\2\40\1\101\6\40\1\102\6\40"+
    "\6\101\3\40\27\101\7\40\1\36\1\44\1\40\1\45"+
    "\1\40\1\36\1\51\1\40\1\103\1\40\1\53\1\104"+
    "\1\105\1\106\1\40\1\107\2\40\1\110\1\111\1\112"+
    "\1\50\6\103\1\113\2\40\6\103\1\114\16\103\1\115"+
    "\1\103\1\116\1\117\1\120\4\40\1\36\1\44\1\40"+
    "\1\45\1\40\1\36\2\40\1\121\15\40\6\121\3\40"+
    "\27\121\6\40\1\35\1\36\1\44\1\35\1\45\1\35"+
    "\1\36\14\35\1\122\51\35\1\40\1\36\1\44\1\40"+
    "\1\45\1\40\1\36\2\40\1\101\15\40\6\101\3\40"+
    "\17\101\1\123\7\101\7\40\1\36\1\44\1\40\1\45"+
    "\1\40\1\36\2\40\1\101\15\40\6\101\3\40\27\101"+
    "\6\40\1\124\1\36\1\44\1\124\1\45\1\124\1\36"+
    "\2\124\1\47\4\124\1\125\4\124\1\126\3\124\6\47"+
    "\3\124\27\47\7\124\1\36\1\44\1\124\1\45\1\124"+
    "\1\36\2\124\1\101\15\124\6\101\3\124\27\101\7\124"+
    "\1\36\1\44\1\124\1\45\1\124\1\36\2\124\1\47"+
    "\4\124\1\125\10\124\6\47\3\124\27\47\6\124\7\40"+
    "\1\127\100\40\1\130\61\40\1\35\1\36\1\44\1\35"+
    "\1\45\1\35\1\36\66\35\1\40\1\36\1\44\1\40"+
    "\1\45\1\40\1\36\2\40\1\131\15\40\6\131\3\40"+
    "\27\131\7\40\2\132\1\40\1\132\1\40\1\132\33\40"+
    "\1\133\3\40\1\134\1\40\1\135\6\40\1\136\1\137"+
    "\15\40\2\140\1\40\1\140\1\40\1\140\2\40\1\101"+
    "\15\40\6\101\3\40\27\101\1\141\53\40\1\142\14\40"+
    "\1\143\12\40\1\36\1\44\1\40\1\45\1\40\1\36"+
    "\3\40\1\144\6\40\2\144\4\40\6\144\3\40\27\144"+
    "\7\40\1\36\1\44\1\40\1\45\1\40\1\36\2\40"+
    "\1\145\15\40\6\145\3\40\27\145\7\40\2\146\1\40"+
    "\1\146\1\40\1\146\26\40\1\147\40\40\1\150\1\151"+
    "\1\40\1\152\1\40\1\150\13\40\1\153\53\40\2\154"+
    "\1\40\1\154\1\40\1\154\1\155\11\40\2\156\4\40"+
    "\6\156\3\40\16\156\1\157\10\156\1\160\6\40\2\161"+
    "\1\40\1\161\1\40\1\161\2\40\1\101\15\40\6\101"+
    "\3\40\27\101\1\162\5\40\75\155\76\0\1\36\4\0"+
    "\1\36\70\0\1\37\111\0\1\163\57\0\1\44\72\0"+
    "\1\47\10\0\1\47\6\0\3\47\4\0\6\47\3\0"+
    "\27\47\3\0\1\47\2\0\1\52\10\0\1\52\6\0"+
    "\3\52\4\0\6\52\3\0\27\52\3\0\1\52\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\27\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\5\54\1\164\21\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\1\54\1\165\25\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\5\54\1\166\10\54\1\167\10\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\5\54\1\170\16\54\1\171\2\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\1\54\1\172\25\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\13\54\1\173"+
    "\13\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\13\54\1\174\13\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\15\54\1\175\11\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\11\54\1\176\15\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\5\54\1\177"+
    "\21\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\1\54\1\200\25\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\16\54\1\201\10\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\25\54\1\202\1\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\1\54\1\203"+
    "\17\54\1\204\2\54\1\205\2\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\5\54\1\206\21\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\5\54\1\207"+
    "\16\54\1\210\2\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\26\54\1\211"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\1\54\1\212\25\54\3\0\1\54"+
    "\2\0\1\77\2\0\1\77\1\0\71\77\1\36\1\0"+
    "\1\77\1\0\1\77\1\100\66\77\1\101\10\0\1\101"+
    "\6\0\3\101\4\0\6\101\3\0\27\101\3\0\1\101"+
    "\22\0\1\213\54\0\1\103\10\0\1\103\6\0\3\103"+
    "\4\0\6\103\3\0\27\103\3\0\1\103\22\0\1\214"+
    "\113\0\1\215\35\0\1\103\10\0\1\103\6\0\3\103"+
    "\4\0\6\103\3\0\24\103\1\216\2\103\3\0\1\103"+
    "\2\0\1\103\10\0\1\103\6\0\3\103\4\0\6\103"+
    "\3\0\1\103\1\217\25\103\3\0\1\103\2\0\1\121"+
    "\10\0\1\121\6\0\3\121\4\0\6\121\3\0\27\121"+
    "\3\0\1\121\2\0\1\101\10\0\1\101\6\0\3\101"+
    "\4\0\6\101\3\0\21\101\1\220\2\101\1\221\2\101"+
    "\3\0\1\101\2\0\7\127\1\222\26\127\1\223\36\127"+
    "\13\130\1\222\22\130\1\224\36\130\1\131\10\0\1\131"+
    "\6\0\3\131\4\0\6\131\3\0\27\131\3\0\1\131"+
    "\3\0\2\132\1\0\1\132\1\0\1\132\144\0\1\225"+
    "\74\0\1\226\63\0\1\227\70\0\1\230\117\0\1\231"+
    "\11\0\2\140\1\0\1\140\1\0\1\140\127\0\1\232"+
    "\114\0\1\233\25\0\1\144\6\0\2\144\4\0\6\144"+
    "\3\0\27\144\6\0\1\145\10\0\1\145\6\0\3\145"+
    "\4\0\6\145\3\0\27\145\3\0\1\145\3\0\2\146"+
    "\1\0\1\146\1\0\1\146\115\0\6\234\41\0\1\150"+
    "\1\235\1\0\1\235\1\0\1\150\67\0\2\235\1\0"+
    "\1\235\1\0\1\235\67\0\1\235\1\151\1\0\1\235"+
    "\1\0\1\235\107\0\2\236\53\0\2\154\1\0\1\154"+
    "\1\0\1\154\107\0\2\237\1\240\3\0\6\237\3\0"+
    "\27\237\27\0\2\237\1\240\3\0\6\237\3\0\2\237"+
    "\1\241\24\237\64\0\1\242\17\0\2\161\1\0\1\161"+
    "\1\0\1\161\66\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\22\54\1\243\4\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\21\54\1\244\5\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\22\54"+
    "\1\245\4\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\24\54\1\246\2\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\3\54\1\247\23\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\14\54\1\250\12\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\7\54"+
    "\1\251\17\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\11\54\1\252\15\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\1\54\1\253\25\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\24\54\1\254\2\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\5\54"+
    "\1\255\21\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\15\54\1\256\11\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\15\54\1\257\11\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\4\54\1\260\22\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\5\54"+
    "\1\261\21\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\21\54\1\262\5\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\11\54\1\263\4\54\1\264\10\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\2\54\1\265\24\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\23\54\1\266\3\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\5\54"+
    "\1\267\21\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\17\54\1\270\7\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\17\54\1\271\7\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\21\54\1\272\5\54\3\0\1\54\22\0\1\273"+
    "\74\0\1\274\54\0\1\103\10\0\1\103\6\0\3\103"+
    "\4\0\6\103\3\0\15\103\1\275\11\103\3\0\1\103"+
    "\2\0\1\103\10\0\1\103\6\0\3\103\4\0\6\103"+
    "\3\0\21\103\1\276\5\103\3\0\1\103\2\0\1\101"+
    "\10\0\1\101\6\0\3\101\4\0\6\101\3\0\11\101"+
    "\1\277\4\101\1\300\10\101\3\0\1\101\2\0\1\101"+
    "\10\0\1\101\6\0\3\101\4\0\6\101\3\0\2\101"+
    "\1\301\24\101\3\0\1\101\2\0\1\127\1\0\1\127"+
    "\1\0\2\127\1\0\63\127\2\0\1\127\1\130\1\0"+
    "\1\130\1\0\2\130\1\0\63\130\2\0\1\130\44\0"+
    "\1\302\111\0\1\303\54\0\1\304\116\0\1\305\56\0"+
    "\1\306\102\0\1\307\105\0\1\310\37\0\6\234\2\0"+
    "\1\311\56\0\2\312\73\0\2\237\1\240\3\0\6\237"+
    "\3\0\12\237\1\313\14\237\50\0\1\314\32\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\3\54"+
    "\1\315\23\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\1\54\1\316\25\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\17\54\1\317\7\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\23\54\1\320\3\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\24\54"+
    "\1\321\2\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\14\54\1\322\12\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\22\54\1\323\4\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\1\54\1\324\25\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\22\54"+
    "\1\325\4\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\14\54\1\326\12\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\13\54\1\327\13\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\5\54\1\330\21\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\7\54"+
    "\1\331\17\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\24\54\1\332\2\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\21\54\1\333\5\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\1\54\1\334\25\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\25\54"+
    "\1\335\1\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\23\54\1\336\3\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\13\54\1\337\13\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\24\54\1\340\2\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\17\54"+
    "\1\341\7\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\5\54\1\342\21\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\1\54\1\343\25\54\3\0\1\54"+
    "\2\0\1\103\10\0\1\103\6\0\3\103\4\0\6\103"+
    "\3\0\1\103\1\344\25\103\3\0\1\103\2\0\1\101"+
    "\10\0\1\101\6\0\3\101\4\0\6\101\3\0\25\101"+
    "\1\345\1\101\3\0\1\101\2\0\1\101\10\0\1\101"+
    "\6\0\3\101\4\0\6\101\3\0\23\101\1\346\3\101"+
    "\3\0\1\101\2\0\1\101\10\0\1\101\6\0\3\101"+
    "\4\0\6\101\3\0\13\101\1\347\13\101\3\0\1\101"+
    "\70\0\1\350\62\0\1\351\64\0\1\352\100\0\1\353"+
    "\105\0\1\354\75\0\1\355\57\0\1\356\66\0\1\311"+
    "\56\0\2\237\1\240\3\0\6\237\3\0\5\237\1\357"+
    "\21\237\60\0\1\360\22\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\21\54\1\361\5\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\14\54\1\362\12\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\16\54\1\363\10\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\5\54\1\364"+
    "\21\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\21\54\1\365\5\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\1\54\1\366\25\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\22\54\1\367\4\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\22\54\1\370"+
    "\4\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\4\54\1\371\22\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\21\54\1\372\5\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\24\54\1\373\2\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\13\54\1\374"+
    "\13\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\13\54\1\375\13\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\14\54\1\376\12\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\1\54\1\377\25\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\5\54\1\u0100"+
    "\21\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\11\54\1\u0101\15\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\21\54\1\u0102\5\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\21\54\1\u0103\5\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\21\54\1\u0104"+
    "\5\54\3\0\1\54\2\0\1\103\10\0\1\103\6\0"+
    "\3\103\4\0\6\103\3\0\21\103\1\u0105\5\103\3\0"+
    "\1\103\2\0\1\101\10\0\1\101\6\0\3\101\4\0"+
    "\6\101\3\0\1\101\1\u0106\25\101\3\0\1\101\2\0"+
    "\1\101\10\0\1\101\6\0\3\101\4\0\6\101\3\0"+
    "\5\101\1\u0107\21\101\3\0\1\101\2\0\1\101\10\0"+
    "\1\101\6\0\3\101\4\0\6\101\3\0\11\101\1\u0108"+
    "\15\101\3\0\1\101\32\0\1\u0109\111\0\1\u010a\115\0"+
    "\1\u010b\53\0\1\u010c\50\0\2\237\1\240\3\0\6\237"+
    "\3\0\3\237\1\u010d\23\237\53\0\1\u010e\27\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\11\54"+
    "\1\u010f\15\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\15\54\1\u0110\11\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\21\54\1\u0111\5\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\11\54\1\u0112\15\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\21\54"+
    "\1\u0113\5\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\11\54\1\u0114\15\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\1\54\1\u0115\25\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\5\54\1\u0116\21\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\16\54"+
    "\1\u0117\10\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\23\54\1\u0118\3\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\3\54\1\u0119\23\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\3\54\1\u011a\23\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\15\54"+
    "\1\u011b\11\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\5\54\1\u011c\21\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\7\54\1\u011d\17\54\3\0\1\54"+
    "\2\0\1\103\10\0\1\103\6\0\3\103\4\0\6\103"+
    "\3\0\7\103\1\u011e\17\103\3\0\1\103\2\0\1\101"+
    "\10\0\1\101\6\0\3\101\4\0\6\101\3\0\23\101"+
    "\1\u011f\3\101\3\0\1\101\2\0\1\101\10\0\1\101"+
    "\6\0\3\101\4\0\6\101\3\0\3\101\1\u0120\23\101"+
    "\3\0\1\101\2\0\1\101\10\0\1\101\6\0\3\101"+
    "\4\0\6\101\3\0\3\101\1\u0121\23\101\3\0\1\101"+
    "\43\0\1\u0122\114\0\1\u0123\34\0\2\237\1\240\3\0"+
    "\6\237\3\0\23\237\1\u0124\3\237\51\0\1\u0125\31\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\17\54\1\u0126\7\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\22\54\1\u0127"+
    "\4\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\23\54\1\u0128\3\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\26\54\1\u0129\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\3\54"+
    "\1\u012a\23\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\7\54\1\u012b\17\54"+
    "\3\0\1\54\2\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\1\54\1\u012c\25\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\5\54\1\u012d\21\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\23\54"+
    "\1\u012e\3\54\3\0\1\54\2\0\1\54\10\0\1\54"+
    "\6\0\3\54\4\0\6\54\3\0\22\54\1\u012f\4\54"+
    "\3\0\1\54\2\0\1\101\10\0\1\101\6\0\3\101"+
    "\4\0\6\101\3\0\5\101\1\u0130\21\101\3\0\1\101"+
    "\2\0\1\101\10\0\1\101\6\0\3\101\4\0\6\101"+
    "\3\0\23\101\1\u0131\3\101\3\0\1\101\65\0\1\u0132"+
    "\74\0\1\u0133\11\0\1\54\10\0\1\54\6\0\3\54"+
    "\4\0\6\54\3\0\23\54\1\u0134\3\54\3\0\1\54"+
    "\2\0\1\54\10\0\1\54\6\0\3\54\4\0\6\54"+
    "\3\0\5\54\1\u0135\21\54\3\0\1\54\2\0\1\54"+
    "\10\0\1\54\6\0\3\54\4\0\6\54\3\0\26\54"+
    "\1\u0136\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\5\54\1\u0137\21\54\3\0"+
    "\1\54\2\0\1\54\10\0\1\54\6\0\3\54\4\0"+
    "\6\54\3\0\4\54\1\u0138\22\54\3\0\1\54\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\5\54\1\u0139\21\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\22\54\1\u013a"+
    "\4\54\3\0\1\54\2\0\1\101\10\0\1\101\6\0"+
    "\3\101\4\0\6\101\3\0\5\101\1\u013b\21\101\3\0"+
    "\1\101\43\0\1\u013c\124\0\1\u013d\3\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\11\54\1\u013e"+
    "\15\54\3\0\1\54\2\0\1\54\10\0\1\54\6\0"+
    "\3\54\4\0\6\54\3\0\4\54\1\u013f\22\54\3\0"+
    "\1\54\2\0\1\101\10\0\1\101\6\0\3\101\4\0"+
    "\6\101\3\0\4\101\1\u0140\22\101\3\0\1\101\2\0"+
    "\1\54\10\0\1\54\6\0\3\54\4\0\6\54\3\0"+
    "\16\54\1\u0141\10\54\3\0\1\54\2\0\1\54\10\0"+
    "\1\54\6\0\3\54\4\0\6\54\3\0\15\54\1\u0142"+
    "\11\54\3\0\1\54\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15311];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\27\0\1\11\1\1\2\11\2\1\2\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\30\1\3\11"+
    "\1\1\3\11\3\1\3\11\1\1\1\11\1\1\3\11"+
    "\12\1\1\11\13\1\1\11\4\1\1\11\30\1\2\0"+
    "\1\11\4\1\1\11\12\0\1\1\2\0\1\11\2\0"+
    "\30\1\2\11\5\1\7\0\1\1\1\11\2\0\33\1"+
    "\1\11\2\0\1\11\2\0\1\11\2\0\30\1\2\0"+
    "\2\11\2\0\23\1\1\0\1\11\1\1\1\0\14\1"+
    "\2\0\10\1\2\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    private Stack<Integer> _stack = new Stack<>();
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void pushState(int state) {
        _stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        var state = _stack.pop();
        yybegin(state);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 87: break;
          case 2:
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            }
          // fall through
          case 88: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 89: break;
          case 4:
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 90: break;
          case 5:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 91: break;
          case 6:
            { yybegin(xTAG_NAME); return AT;
            }
          // fall through
          case 92: break;
          case 7:
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 93: break;
          case 8:
            { return SHARP;
            }
          // fall through
          case 94: break;
          case 9:
            { return ID;
            }
          // fall through
          case 95: break;
          case 10:
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            }
          // fall through
          case 96: break;
          case 11:
            { pushState(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 97: break;
          case 12:
            { yybegin(xCOMMENT_STRING); return ID;
            }
          // fall through
          case 98: break;
          case 13:
            { pushState(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 99: break;
          case 14:
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            }
          // fall through
          case 100: break;
          case 15:
            { beginType(); return ID;
            }
          // fall through
          case 101: break;
          case 16:
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            }
          // fall through
          case 102: break;
          case 17:
            { _typeLevel++; return LPAREN;
            }
          // fall through
          case 103: break;
          case 18:
            { _typeLevel--; _typeReq = false; return RPAREN;
            }
          // fall through
          case 104: break;
          case 19:
            { _typeReq = true; return COMMA;
            }
          // fall through
          case 105: break;
          case 20:
            { _typeReq = true; return EXTENDS;
            }
          // fall through
          case 106: break;
          case 21:
            { _typeLevel++; return LT;
            }
          // fall through
          case 107: break;
          case 22:
            { _typeLevel--; _typeReq = false; return GT;
            }
          // fall through
          case 108: break;
          case 23:
            { _typeLevel++; return LCURLY;
            }
          // fall through
          case 109: break;
          case 24:
            { _typeReq = true; return OR;
            }
          // fall through
          case 110: break;
          case 25:
            { _typeLevel--; _typeReq = false; return RCURLY;
            }
          // fall through
          case 111: break;
          case 26:
            { yybegin(xCLASS_EXTEND); return ID;
            }
          // fall through
          case 112: break;
          case 27:
            { beginType(); return EXTENDS;
            }
          // fall through
          case 113: break;
          case 28:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 114: break;
          case 29:
            { return COMMA;
            }
          // fall through
          case 115: break;
          case 30:
            { return EXTENDS;
            }
          // fall through
          case 116: break;
          case 31:
            { popState(); return STRING_LITERAL;
            }
          // fall through
          case 117: break;
          case 32:
            { yybegin(xSWAG_QUERY_TYPE); return ID;
            }
          // fall through
          case 118: break;
          case 33:
            { yybegin(xSWAG_QUERY_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 119: break;
          case 34:
            { yybegin(xSWAG_QUERY_TY); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 120: break;
          case 35:
            { yybegin(xSWAG_QUERY_TY); return LCURLY;
            }
          // fall through
          case 121: break;
          case 36:
            { yybegin(xSWAG_METHOD); return  URL;
            }
          // fall through
          case 122: break;
          case 37:
            { yybegin(YYINITIAL); return ID;
            }
          // fall through
          case 123: break;
          case 38:
            { yybegin(xSWAG_METHOD); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 124: break;
          case 39:
            { yybegin(xSWAG_RESPONSE_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 125: break;
          case 40:
            { yybegin(xCOMMENT_STRING); return SWAG_NOTE;
            }
          // fall through
          case 126: break;
          case 41:
            { yybegin(xSWAG_RESPONSE_TY);   return LCURLY;
            }
          // fall through
          case 127: break;
          case 42:
            { yybegin(xSWAG_RESPONSE_TY); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 128: break;
          case 43:
            { yybegin(xSWAG_RESPONSE_TY); return LCURLY;
            }
          // fall through
          case 129: break;
          case 44:
            { return DASHES;
            }
          // fall through
          case 130: break;
          case 45:
            { _typeReq = false; return ARR;
            }
          // fall through
          case 131: break;
          case 46:
            { yybegin(xSWAG_RESPONSE); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 132: break;
          case 47:
            { yybegin(xSWAG_RESPONSE_TYPE); return SWAG_RES_KEY;
            }
          // fall through
          case 133: break;
          case 48:
            { yybegin(xTAG); return TAG_NAME_SEE;
            }
          // fall through
          case 134: break;
          case 49:
            { return FUN;
            }
          // fall through
          case 135: break;
          case 50:
            { return  HTTP_METHOD_SWAG;
            }
          // fall through
          case 136: break;
          case 51:
            { yybegin(xSWAG_RESPONSE_TYPE); return SWAG_HTTPSTATUS;
            }
          // fall through
          case 137: break;
          case 52:
            { yybegin(xSWAG_TAGS); return TAG_NAME_SWAGTAGS;
            }
          // fall through
          case 138: break;
          case 53:
            { yybegin(xCLASS); return TAG_NAME_ENUM;
            }
          // fall through
          case 139: break;
          case 54:
            { beginType(); return TAG_NAME_TYPE;
            }
          // fall through
          case 140: break;
          case 55:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_BODY;
            }
          // fall through
          case 141: break;
          case 56:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_PATH;
            }
          // fall through
          case 142: break;
          case 57:
            { yybegin(xCOMMENT_STRING); return SWAGPARAM_TRUE;
            }
          // fall through
          case 143: break;
          case 58:
            { yybegin(xSWAG_PARAMS); return TAG_NAME_SWAGPARAM;
            }
          // fall through
          case 144: break;
          case 59:
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            }
          // fall through
          case 145: break;
          case 60:
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            }
          // fall through
          case 146: break;
          case 61:
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            }
          // fall through
          case 147: break;
          case 62:
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            }
          // fall through
          case 148: break;
          case 63:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_QUERY;
            }
          // fall through
          case 149: break;
          case 64:
            { yybegin(xCOMMENT_STRING); return SWAGPARAM_FALSE;
            }
          // fall through
          case 150: break;
          case 65:
            { yybegin(xSWAG_ROUTER); return TAG_NAME_SWAGROUTER;
            }
          // fall through
          case 151: break;
          case 66:
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            }
          // fall through
          case 152: break;
          case 67:
            { return TAG_NAME_PUBLIC;
            }
          // fall through
          case 153: break;
          case 68:
            { beginType(); return TAG_NAME_RETURN;
            }
          // fall through
          case 154: break;
          case 69:
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            }
          // fall through
          case 155: break;
          case 70:
            { _typeReq = true; return VARARG;
            }
          // fall through
          case 156: break;
          case 71:
            { yybegin(xFIELD_ID); return PUBLIC;
            }
          // fall through
          case 157: break;
          case 72:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_HEADER;
            }
          // fall through
          case 158: break;
          case 73:
            { yybegin(xSWAG_RESPONSE_TYPE); return SWAGRES_TYPE_OBJ;
            }
          // fall through
          case 159: break;
          case 74:
            { yybegin(xSWAG_SUMMARY); return TAG_NAME_SWAGSUMMARY;
            }
          // fall through
          case 160: break;
          case 75:
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            }
          // fall through
          case 161: break;
          case 76:
            { return TAG_NAME_PRIVATE;
            }
          // fall through
          case 162: break;
          case 77:
            { yybegin(xFIELD_ID); return PRIVATE;
            }
          // fall through
          case 163: break;
          case 78:
            { yybegin(xSWAG_RESPONSE);  return TAG_NAME_SWAGRES;
            }
          // fall through
          case 164: break;
          case 79:
            { yybegin(xSWAG_SIGN); return TAG_NAME_SIGN;
            }
          // fall through
          case 165: break;
          case 80:
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            }
          // fall through
          case 166: break;
          case 81:
            { beginType(); return TAG_NAME_OVERLOAD;
            }
          // fall through
          case 167: break;
          case 82:
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            }
          // fall through
          case 168: break;
          case 83:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_FORM;
            }
          // fall through
          case 169: break;
          case 84:
            { return TAG_NAME_PROTECTED;
            }
          // fall through
          case 170: break;
          case 85:
            { yybegin(xFIELD_ID); return PROTECTED;
            }
          // fall through
          case 171: break;
          case 86:
            { yybegin(xSWAG_DES); return TAG_NAME_SWAGDES;
            }
          // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

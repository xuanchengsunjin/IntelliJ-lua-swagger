// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: doc.flex

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;
import java.util.Stack;

public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xTYPE_REF = 12;
  public static final int xCLASS = 14;
  public static final int xCLASS_EXTEND = 16;
  public static final int xFIELD = 18;
  public static final int xFIELD_ID = 20;
  public static final int xGENERIC = 22;
  public static final int xALIAS = 24;
  public static final int xSUPPRESS = 26;
  public static final int xDOUBLE_QUOTED_STRING = 28;
  public static final int xSINGLE_QUOTED_STRING = 30;
  public static final int xSWAG_TAGS = 32;
  public static final int xSWAG_PARAMS = 34;
  public static final int xSWAG_SUMMARY = 36;
  public static final int xSWAG_QUERY_TYPE = 38;
  public static final int xSWAG_QUERY_TY = 40;
  public static final int xSWAG_QUERY_OPTIONAL = 42;
  public static final int xSWAG_ROUTER = 44;
  public static final int xSWAG_DES = 46;
  public static final int xSWAG_SIGN = 48;
  public static final int xSWAG_METHOD = 50;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 16, 16, 
    22, 22, 23, 23
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\5\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\2\5\1\16\1\17\1\20\1\12\12\21"+
    "\1\22\1\5\1\23\1\12\1\24\1\12\1\25\3\26"+
    "\1\27\13\26\1\30\1\26\1\31\1\32\1\33\6\26"+
    "\1\34\1\35\1\36\1\5\1\37\1\5\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\2\37"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\2\37\1\64\1\37\1\65\1\66"+
    "\1\67\1\5\6\0\1\70\32\0\1\71\1\5\4\11"+
    "\4\5\1\11\2\5\1\0\7\5\1\11\4\5\1\11"+
    "\5\5\27\11\1\5\37\11\1\5\u01ca\11\4\5\14\11"+
    "\16\5\5\11\7\5\1\11\1\5\1\11\21\5\160\0"+
    "\5\11\1\5\2\11\2\5\4\11\1\5\1\11\6\5"+
    "\1\11\1\5\3\11\1\5\1\11\1\5\24\11\1\5"+
    "\123\11\1\5\213\11\1\5\5\0\2\5\246\11\1\5"+
    "\46\11\2\5\1\11\6\5\51\11\6\5\1\11\1\5"+
    "\55\0\1\5\1\0\1\5\2\0\1\5\2\0\1\5"+
    "\1\0\10\5\33\11\4\5\4\11\15\5\6\0\5\5"+
    "\1\11\4\5\13\0\1\5\1\0\3\5\53\11\37\0"+
    "\4\5\2\11\1\0\143\11\1\5\1\11\10\0\1\5"+
    "\6\0\2\11\2\0\1\5\4\0\2\11\12\0\3\11"+
    "\2\5\1\11\17\5\1\0\1\11\1\0\36\11\33\0"+
    "\2\5\131\11\13\0\1\11\16\5\12\0\41\11\11\0"+
    "\2\11\4\5\1\11\2\5\1\0\30\11\4\0\1\11"+
    "\11\0\1\11\3\0\1\11\5\0\22\5\31\11\3\0"+
    "\4\5\13\11\65\5\25\11\1\5\22\11\13\5\61\0"+
    "\66\11\3\0\1\11\22\0\1\11\7\0\12\11\2\0"+
    "\2\5\12\0\1\5\20\11\3\0\1\5\10\11\2\5"+
    "\2\11\2\5\26\11\1\5\7\11\1\5\1\11\3\5"+
    "\4\11\2\5\1\0\1\11\7\0\2\5\2\0\2\5"+
    "\3\0\1\11\10\5\1\0\4\5\2\11\1\5\3\11"+
    "\2\0\2\5\12\0\4\11\7\5\2\11\1\5\1\0"+
    "\2\5\3\0\1\5\6\11\4\5\2\11\2\5\26\11"+
    "\1\5\7\11\1\5\2\11\1\5\2\11\1\5\2\11"+
    "\2\5\1\0\1\5\5\0\4\5\2\0\2\5\3\0"+
    "\3\5\1\0\7\5\4\11\1\5\1\11\7\5\14\0"+
    "\3\11\1\0\13\5\3\0\1\5\11\11\1\5\3\11"+
    "\1\5\26\11\1\5\7\11\1\5\2\11\1\5\5\11"+
    "\2\5\1\0\1\11\10\0\1\5\3\0\1\5\3\0"+
    "\2\5\1\11\17\5\2\11\2\0\2\5\12\0\1\5"+
    "\1\11\7\5\1\11\6\0\1\5\3\0\1\5\10\11"+
    "\2\5\2\11\2\5\26\11\1\5\7\11\1\5\2\11"+
    "\1\5\5\11\2\5\1\0\1\11\7\0\2\5\2\0"+
    "\2\5\3\0\7\5\3\0\4\5\2\11\1\5\3\11"+
    "\2\0\2\5\12\0\1\5\1\11\20\5\1\0\1\11"+
    "\1\5\6\11\3\5\3\11\1\5\4\11\3\5\2\11"+
    "\1\5\1\11\1\5\2\11\3\5\2\11\3\5\3\11"+
    "\3\5\14\11\4\5\5\0\3\5\3\0\1\5\4\0"+
    "\2\5\1\11\6\5\1\0\16\5\12\0\11\5\1\11"+
    "\6\5\5\0\10\11\1\5\3\11\1\5\27\11\1\5"+
    "\20\11\3\5\1\11\7\0\1\5\3\0\1\5\4\0"+
    "\7\5\2\0\1\5\3\11\5\5\2\11\2\0\2\5"+
    "\12\0\20\5\1\11\3\0\1\5\10\11\1\5\3\11"+
    "\1\5\27\11\1\5\12\11\1\5\5\11\2\5\1\0"+
    "\1\11\7\0\1\5\3\0\1\5\4\0\7\5\2\0"+
    "\7\5\1\11\1\5\2\11\2\0\2\5\12\0\1\5"+
    "\2\11\15\5\4\0\11\11\1\5\3\11\1\5\51\11"+
    "\2\0\1\11\7\0\1\5\3\0\1\5\4\0\1\11"+
    "\5\5\3\11\1\0\7\5\3\11\2\0\2\5\12\0"+
    "\12\5\6\11\1\5\3\0\1\5\22\11\3\5\30\11"+
    "\1\5\11\11\1\5\1\11\2\5\7\11\3\5\1\0"+
    "\4\5\6\0\1\5\1\0\1\5\10\0\6\5\12\0"+
    "\2\5\2\0\15\5\60\11\1\0\2\11\7\0\4\5"+
    "\10\11\10\0\1\5\12\0\47\5\2\11\1\5\1\11"+
    "\1\5\5\11\1\5\30\11\1\5\1\11\1\5\12\11"+
    "\1\0\2\11\11\0\1\11\2\5\5\11\1\5\1\11"+
    "\1\5\6\0\2\5\12\0\2\5\4\11\40\5\1\11"+
    "\27\5\2\0\6\5\12\0\13\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\2\0\10\11\1\5\44\11\4\5"+
    "\24\0\1\5\2\0\5\11\13\0\1\5\44\0\11\5"+
    "\1\0\71\5\53\11\24\0\1\11\12\0\6\5\6\11"+
    "\4\0\4\11\3\0\1\11\3\0\2\11\7\0\3\11"+
    "\4\0\15\11\14\0\1\11\17\0\2\5\46\11\1\5"+
    "\1\11\5\5\1\11\2\5\53\11\1\5\115\11\1\5"+
    "\4\11\2\5\7\11\1\5\1\11\1\5\4\11\2\5"+
    "\51\11\1\5\4\11\2\5\41\11\1\5\4\11\2\5"+
    "\7\11\1\5\1\11\1\5\4\11\2\5\17\11\1\5"+
    "\71\11\1\5\4\11\2\5\103\11\2\5\3\0\40\5"+
    "\20\11\20\5\126\11\2\5\6\11\3\5\u016c\11\2\5"+
    "\21\11\1\71\32\11\5\5\113\11\3\5\13\11\7\5"+
    "\15\11\1\5\4\11\3\0\13\5\22\11\3\0\13\5"+
    "\22\11\2\0\14\5\15\11\1\5\3\11\1\5\2\0"+
    "\14\5\64\11\40\0\3\5\1\11\3\5\2\11\1\0"+
    "\2\5\12\0\41\5\4\0\1\5\12\0\6\5\131\11"+
    "\7\5\5\11\2\0\42\11\1\0\1\11\5\5\106\11"+
    "\12\5\37\11\1\5\14\0\4\5\14\0\12\5\12\0"+
    "\36\11\2\5\5\11\13\5\54\11\4\5\32\11\6\5"+
    "\12\0\46\5\27\11\5\0\4\5\65\11\12\0\1\5"+
    "\35\0\2\5\13\0\6\5\12\0\15\5\1\11\10\5"+
    "\16\0\1\5\2\0\77\5\5\0\57\11\21\0\7\11"+
    "\4\5\12\0\21\5\11\0\14\5\3\0\36\11\15\0"+
    "\2\11\12\0\54\11\16\0\14\5\44\11\24\0\10\5"+
    "\12\0\3\5\3\11\12\0\44\11\2\5\11\11\7\5"+
    "\53\11\2\5\3\11\20\5\3\0\1\5\25\0\4\11"+
    "\1\0\6\11\1\0\2\11\3\0\1\11\5\5\300\11"+
    "\72\0\1\5\5\0\26\11\2\5\6\11\2\5\46\11"+
    "\2\5\6\11\2\5\10\11\1\5\1\11\1\5\1\11"+
    "\1\5\1\11\1\5\37\11\2\5\65\11\1\5\7\11"+
    "\1\5\1\11\3\5\3\11\1\5\7\11\3\5\4\11"+
    "\2\5\6\11\4\5\15\11\5\5\3\11\1\5\7\11"+
    "\3\5\13\71\5\0\30\5\2\3\5\0\1\71\17\5"+
    "\2\11\23\5\1\11\12\5\1\71\5\0\1\5\12\0"+
    "\1\5\1\11\15\5\1\11\20\5\15\11\3\5\40\11"+
    "\20\5\15\0\4\5\1\0\3\5\14\0\21\5\1\11"+
    "\4\5\1\11\2\5\12\11\1\5\1\11\3\5\5\11"+
    "\6\5\1\11\1\5\1\11\1\5\1\11\1\5\4\11"+
    "\1\5\13\11\2\5\4\11\5\5\5\11\4\5\1\11"+
    "\21\5\51\11\u0177\5\57\11\1\5\57\11\1\5\205\11"+
    "\6\5\4\11\3\0\2\11\14\5\46\11\1\5\1\11"+
    "\5\5\1\11\2\5\70\11\7\5\1\11\17\5\1\0"+
    "\27\11\11\5\7\11\1\5\7\11\1\5\7\11\1\5"+
    "\7\11\1\5\7\11\1\5\7\11\1\5\7\11\1\5"+
    "\7\11\1\5\40\0\57\5\1\11\320\5\1\71\4\5"+
    "\3\11\31\5\11\11\6\0\1\5\5\11\2\5\5\11"+
    "\4\5\126\11\2\5\2\0\2\5\3\11\1\5\132\11"+
    "\1\5\4\11\5\5\53\11\1\5\136\11\21\5\40\11"+
    "\60\5\320\11\100\5\375\11\3\5\215\11\103\5\56\11"+
    "\2\5\15\11\3\5\20\11\12\0\2\11\24\5\57\11"+
    "\1\0\4\5\12\0\1\5\37\11\2\0\120\11\2\0"+
    "\45\5\11\11\2\5\147\11\2\5\65\11\2\5\11\11"+
    "\52\5\15\11\1\0\3\11\1\0\4\11\1\0\27\11"+
    "\5\0\4\5\1\0\13\5\1\11\7\5\64\11\14\5"+
    "\2\0\62\11\22\0\12\5\12\0\6\5\22\0\6\11"+
    "\3\5\1\11\1\5\2\11\13\0\34\11\10\0\2\5"+
    "\27\11\15\0\14\5\35\11\3\5\4\0\57\11\16\0"+
    "\16\5\1\11\12\0\6\5\5\11\1\0\12\11\12\0"+
    "\5\11\1\5\51\11\16\0\11\5\3\11\1\0\10\11"+
    "\2\0\2\5\12\0\6\5\27\11\3\5\1\11\3\0"+
    "\62\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0"+
    "\1\11\1\0\1\11\30\5\3\11\2\5\13\11\5\0"+
    "\2\5\3\11\2\0\12\5\6\11\2\5\6\11\2\5"+
    "\6\11\11\5\7\11\1\5\7\11\1\5\53\11\1\5"+
    "\16\11\6\5\163\11\10\0\1\5\2\0\2\5\12\0"+
    "\6\5\244\11\14\5\27\11\4\5\61\11\4\5\u0100\72"+
    "\156\11\2\5\152\11\46\5\7\11\14\5\5\11\5\5"+
    "\1\11\1\0\12\11\1\5\15\11\1\5\5\11\1\5"+
    "\1\11\1\5\2\11\1\5\2\11\1\5\154\11\41\5"+
    "\153\11\22\5\100\11\2\5\66\11\50\5\15\11\3\5"+
    "\20\0\20\5\20\0\3\5\2\11\30\5\3\11\31\5"+
    "\1\11\6\5\5\11\1\5\207\11\2\5\1\0\4\5"+
    "\1\11\13\5\12\0\7\5\32\11\4\5\1\11\1\5"+
    "\32\11\13\5\131\11\3\5\6\11\2\5\6\11\2\5"+
    "\6\11\2\5\3\11\3\5\2\11\3\5\2\11\22\5"+
    "\3\0\4\5\14\11\1\5\32\11\1\5\23\11\1\5"+
    "\2\11\1\5\17\11\2\5\16\11\42\5\173\11\105\5"+
    "\65\11\210\5\1\0\202\5\35\11\3\5\61\11\17\5"+
    "\1\0\37\5\40\11\15\5\36\11\5\5\46\11\5\0"+
    "\5\5\36\11\2\5\44\11\4\5\10\11\1\5\5\11"+
    "\52\5\236\11\2\5\12\0\6\5\44\11\4\5\44\11"+
    "\4\5\50\11\10\5\64\11\234\5\67\11\11\5\26\11"+
    "\12\5\10\11\230\5\6\11\2\5\1\11\1\5\54\11"+
    "\1\5\2\11\3\5\1\11\2\5\27\11\12\5\27\11"+
    "\11\5\37\11\101\5\23\11\1\5\2\11\12\5\26\11"+
    "\12\5\32\11\106\5\70\11\6\5\2\11\100\5\1\11"+
    "\3\0\1\5\2\0\5\5\4\0\4\11\1\5\3\11"+
    "\1\5\35\11\2\5\3\0\4\5\1\0\40\5\35\11"+
    "\3\5\35\11\43\5\10\11\1\5\34\11\2\0\31\5"+
    "\66\11\12\5\26\11\12\5\23\11\15\5\22\11\156\5"+
    "\111\11\67\5\63\11\15\5\63\11\15\5\44\11\4\0"+
    "\10\5\12\0\u0146\5\52\11\1\5\2\0\3\5\2\11"+
    "\116\5\35\11\12\5\1\11\10\5\26\11\13\0\137\5"+
    "\25\11\33\5\27\11\11\5\3\0\65\11\17\0\37\5"+
    "\12\0\17\5\4\0\55\11\13\0\2\5\1\0\17\5"+
    "\1\0\2\5\31\11\7\5\12\0\6\5\3\0\44\11"+
    "\16\0\1\5\12\0\4\5\1\11\2\0\1\11\10\5"+
    "\43\11\1\0\2\5\1\11\11\5\3\0\60\11\16\0"+
    "\4\11\4\5\4\0\1\5\14\0\1\11\1\5\1\11"+
    "\43\5\22\11\1\5\31\11\14\0\6\5\1\0\101\5"+
    "\7\11\1\5\1\11\1\5\4\11\1\5\17\11\1\5"+
    "\12\11\7\5\57\11\14\0\5\5\12\0\6\5\4\0"+
    "\1\5\10\11\2\5\2\11\2\5\26\11\1\5\7\11"+
    "\1\5\2\11\1\5\5\11\1\5\2\0\1\11\7\0"+
    "\2\5\2\0\2\5\3\0\2\5\1\11\6\5\1\0"+
    "\5\5\5\11\2\0\2\5\7\0\3\5\5\0\213\5"+
    "\65\11\22\0\4\11\5\5\12\0\4\5\1\0\3\11"+
    "\36\5\60\11\24\0\2\11\1\5\1\11\10\5\12\0"+
    "\246\5\57\11\7\0\2\5\11\0\27\5\4\11\2\0"+
    "\42\5\60\11\21\0\3\5\1\11\13\5\12\0\46\5"+
    "\53\11\15\0\1\11\7\5\12\0\66\5\33\11\2\5"+
    "\17\0\4\5\12\0\306\5\54\11\17\0\145\5\100\11"+
    "\12\0\25\5\10\11\2\5\1\11\2\5\10\11\1\5"+
    "\2\11\1\5\30\11\6\0\1\5\2\0\2\5\4\0"+
    "\1\11\1\0\1\11\2\0\14\5\12\0\106\5\10\11"+
    "\2\5\47\11\7\0\2\5\7\0\1\11\1\5\1\11"+
    "\1\0\33\5\1\11\12\0\50\11\7\0\1\11\4\0"+
    "\10\5\1\0\10\5\1\11\13\0\56\11\20\0\3\5"+
    "\1\11\42\5\71\11\7\5\11\11\1\5\45\11\10\0"+
    "\1\5\10\0\1\11\17\5\12\0\30\5\36\11\2\5"+
    "\26\0\1\5\16\0\111\5\7\11\1\5\2\11\1\5"+
    "\46\11\6\0\3\5\1\0\1\5\2\0\1\5\7\0"+
    "\1\11\1\0\10\5\12\0\6\5\6\11\1\5\2\11"+
    "\1\5\40\11\5\0\1\5\2\0\1\5\5\0\1\11"+
    "\7\5\12\0\u0136\5\23\11\4\0\271\5\1\11\54\5"+
    "\4\11\37\5\232\11\146\5\157\11\21\5\304\11\274\5"+
    "\57\11\1\5\11\0\307\5\107\11\271\5\71\11\7\5"+
    "\37\11\1\5\12\0\146\5\36\11\2\5\5\0\13\5"+
    "\60\11\7\0\11\5\4\11\14\5\12\0\11\5\25\11"+
    "\5\5\23\11\260\5\100\11\200\5\113\11\4\5\1\0"+
    "\1\11\67\0\7\5\4\0\15\11\100\5\2\11\1\5"+
    "\1\11\1\0\13\5\2\0\16\5\370\11\10\5\326\11"+
    "\52\5\11\11\367\5\37\11\61\5\3\11\21\5\4\11"+
    "\10\5\u018c\11\4\5\153\11\5\5\15\11\3\5\11\11"+
    "\7\5\12\11\3\5\2\0\1\5\4\0\301\5\5\0"+
    "\3\5\26\0\2\5\7\0\36\5\4\0\224\5\3\0"+
    "\273\5\125\11\1\5\107\11\1\5\2\11\2\5\1\11"+
    "\2\5\2\11\2\5\4\11\1\5\14\11\1\5\1\11"+
    "\1\5\7\11\1\5\101\11\1\5\4\11\2\5\10\11"+
    "\1\5\7\11\1\5\34\11\1\5\4\11\1\5\5\11"+
    "\1\5\1\11\3\5\7\11\1\5\u0154\11\2\5\31\11"+
    "\1\5\31\11\1\5\37\11\1\5\31\11\1\5\37\11"+
    "\1\5\31\11\1\5\37\11\1\5\31\11\1\5\37\11"+
    "\1\5\31\11\1\5\10\11\2\5\151\0\4\5\62\0"+
    "\10\5\1\0\16\5\1\0\26\5\5\0\1\5\17\0"+
    "\120\5\7\0\1\5\21\0\2\5\7\0\1\5\2\0"+
    "\1\5\5\0\325\5\55\11\3\5\7\0\7\11\2\5"+
    "\12\0\4\5\1\11\u0171\5\54\11\16\0\5\5\306\11"+
    "\13\5\7\0\51\5\104\11\7\0\1\11\4\5\12\0"+
    "\u0156\5\1\11\117\5\4\11\1\5\33\11\1\5\2\11"+
    "\1\5\1\11\2\5\1\11\1\5\12\11\1\5\4\11"+
    "\1\5\1\11\1\5\1\11\6\5\1\11\4\5\1\11"+
    "\1\5\1\11\1\5\1\11\1\5\3\11\1\5\2\11"+
    "\1\5\1\11\2\5\1\11\1\5\1\11\1\5\1\11"+
    "\1\5\1\11\1\5\1\11\1\5\2\11\1\5\1\11"+
    "\2\5\4\11\1\5\7\11\1\5\4\11\1\5\4\11"+
    "\1\5\1\11\1\5\12\11\1\5\21\11\5\5\3\11"+
    "\1\5\5\11\1\5\21\11\u0134\5\12\0\6\5\336\11"+
    "\42\5\65\11\13\5\336\11\2\5\u0182\11\16\5\u0131\11"+
    "\37\5\36\11\342\5\113\11\266\5\1\0\36\5\140\0"+
    "\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\23\0\1\2\1\3\1\4\1\5\1\4"+
    "\1\2\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\23\16\1\1\1\3\1\17\1\5\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\25\1\26\1\5\2\20"+
    "\1\27\1\30\1\31\1\32\1\33\1\17\1\34\1\35"+
    "\1\36\2\37\1\40\1\41\5\5\1\42\1\43\2\5"+
    "\1\44\1\45\1\46\1\5\1\47\26\16\2\0\1\50"+
    "\2\20\2\17\1\37\12\0\23\16\1\51\3\16\1\17"+
    "\1\20\1\52\1\20\3\17\7\0\1\53\5\16\1\54"+
    "\2\16\1\55\13\16\1\56\1\16\1\20\3\17\1\57"+
    "\2\0\1\60\2\0\1\61\1\16\1\62\3\16\1\63"+
    "\1\64\1\65\4\16\1\66\6\16\1\20\3\17\2\0"+
    "\1\67\1\70\1\16\1\71\4\16\1\72\3\16\1\73"+
    "\1\74\1\16\1\75\1\76\2\17\1\77\1\0\1\100"+
    "\2\16\1\101\1\102\2\16\1\103\2\16\1\104\1\17"+
    "\1\0\1\16\1\105\1\106\1\107\1\16\1\110\1\17"+
    "\1\111\1\16\1\112\1\113\1\16\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u0588\0\u0588\0\u05fe\0\u0639\0\u0588\0\u0588"+
    "\0\u0674\0\u0588\0\u06af\0\u0588\0\u0588\0\u06ea\0\u0588\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0588"+
    "\0\u0588\0\u0588\0\u0cad\0\u0588\0\u0588\0\u0588\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0588\0\u0588\0\u0588\0\u0d99\0\u0588\0\u0dd4\0\u0588"+
    "\0\u0588\0\u0588\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u0588\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u0639\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u0588\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u0588\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u0725"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u0588\0\u0588\0\u0c72\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u0725"+
    "\0\u237e\0\u23b9\0\u0725\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u0725\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u0588\0\u27a4\0\u27df\0\u0588"+
    "\0\u281a\0\u2855\0\u0588\0\u2890\0\u0725\0\u28cb\0\u2906\0\u2941"+
    "\0\u0725\0\u0725\0\u0725\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u0725"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u0588\0\u0588\0\u2d2c\0\u0725"+
    "\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u0725\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u0725\0\u0725\0\u2f04\0\u0725\0\u0c72\0\u2f3f\0\u2f7a\0\u0bfc"+
    "\0\u2fb5\0\u0588\0\u2ff0\0\u302b\0\u0725\0\u0725\0\u3066\0\u30a1"+
    "\0\u0725\0\u30dc\0\u3117\0\u0bfc\0\u3152\0\u318d\0\u31c8\0\u0725"+
    "\0\u0725\0\u0725\0\u3203\0\u0725\0\u323e\0\u0588\0\u3279\0\u0725"+
    "\0\u0bfc\0\u32b4\0\u0725";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\1\32\1\33\1\34\1\35\1\31\1\32\10\31"+
    "\1\36\5\31\1\37\42\31\1\34\1\31\2\34\1\32"+
    "\1\40\1\34\1\41\1\34\1\32\1\34\1\42\1\43"+
    "\13\34\1\44\6\43\3\34\26\43\7\34\1\32\1\40"+
    "\1\34\1\41\1\34\1\32\1\45\1\34\1\46\1\34"+
    "\1\47\12\34\6\46\3\34\26\46\7\34\1\32\1\40"+
    "\1\34\1\41\1\34\1\32\2\34\1\50\14\34\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\3\34\1\50\1\56"+
    "\1\50\1\57\1\50\1\60\1\61\1\62\2\50\1\63"+
    "\1\64\1\50\1\65\1\66\1\50\1\67\1\70\1\71"+
    "\1\50\1\72\1\50\6\34\1\73\1\32\1\40\1\73"+
    "\1\41\1\73\1\74\64\73\1\34\1\32\1\40\1\34"+
    "\1\41\1\34\1\32\2\34\1\75\6\34\1\76\5\34"+
    "\6\75\3\34\26\75\7\34\1\32\1\40\1\34\1\41"+
    "\1\34\1\32\1\45\1\34\1\77\1\34\1\47\1\100"+
    "\1\101\1\102\1\34\1\103\1\34\1\104\1\105\1\106"+
    "\1\44\6\77\1\107\2\34\6\77\1\110\15\77\1\111"+
    "\1\77\1\112\1\113\1\114\4\34\1\32\1\40\1\34"+
    "\1\41\1\34\1\32\2\34\1\115\14\34\6\115\3\34"+
    "\26\115\6\34\1\31\1\32\1\40\1\31\1\41\1\31"+
    "\1\32\13\31\1\116\50\31\1\34\1\32\1\40\1\34"+
    "\1\41\1\34\1\32\2\34\1\75\14\34\6\75\3\34"+
    "\16\75\1\117\7\75\7\34\1\32\1\40\1\34\1\41"+
    "\1\34\1\32\2\34\1\75\14\34\6\75\3\34\26\75"+
    "\6\34\1\120\1\32\1\40\1\120\1\41\1\120\1\32"+
    "\2\120\1\43\4\120\1\121\3\120\1\122\3\120\6\43"+
    "\3\120\26\43\7\120\1\32\1\40\1\120\1\41\1\120"+
    "\1\32\2\120\1\75\14\120\6\75\3\120\26\75\7\120"+
    "\1\32\1\40\1\120\1\41\1\120\1\32\2\120\1\43"+
    "\4\120\1\121\7\120\6\43\3\120\26\43\6\120\7\34"+
    "\1\123\76\34\1\124\57\34\1\31\1\32\1\40\1\31"+
    "\1\41\1\31\1\32\64\31\1\34\1\32\1\40\1\34"+
    "\1\41\1\34\1\32\2\34\1\125\14\34\6\125\3\34"+
    "\26\125\7\34\2\126\1\34\1\126\1\34\1\126\32\34"+
    "\1\127\3\34\1\130\1\34\1\131\5\34\1\132\1\133"+
    "\15\34\2\134\1\34\1\134\1\34\1\134\2\34\1\75"+
    "\14\34\6\75\3\34\26\75\1\135\52\34\1\136\13\34"+
    "\1\137\12\34\1\32\1\40\1\34\1\41\1\34\1\32"+
    "\3\34\1\140\6\34\1\140\4\34\6\140\3\34\26\140"+
    "\7\34\1\32\1\40\1\34\1\41\1\34\1\32\2\34"+
    "\1\141\14\34\6\141\3\34\26\141\7\34\2\142\1\34"+
    "\1\142\1\34\1\142\25\34\1\143\36\34\74\0\1\32"+
    "\4\0\1\32\66\0\1\33\107\0\1\144\55\0\1\40"+
    "\70\0\1\43\10\0\1\43\6\0\2\43\4\0\6\43"+
    "\3\0\26\43\3\0\1\43\2\0\1\46\10\0\1\46"+
    "\6\0\2\46\4\0\6\46\3\0\26\46\3\0\1\46"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\26\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\5\50\1\145\20\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\1\50\1\146\24\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\15\50\1\147\10\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\5\50"+
    "\1\150\15\50\1\151\2\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\1\50"+
    "\1\152\24\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\12\50\1\153\13\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\12\50\1\154\13\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\14\50\1\155\11\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\11\50"+
    "\1\156\14\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\5\50\1\157\20\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\1\50\1\160\24\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\15\50\1\161\10\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\24\50"+
    "\1\162\1\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\1\50\1\163\16\50"+
    "\1\164\2\50\1\165\2\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\5\50"+
    "\1\166\20\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\5\50\1\167\15\50"+
    "\1\170\2\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\25\50\1\171\3\0"+
    "\1\50\2\0\1\50\10\0\1\50\6\0\2\50\4\0"+
    "\6\50\3\0\1\50\1\172\24\50\3\0\1\50\2\0"+
    "\1\73\2\0\1\73\1\0\67\73\1\32\1\0\1\73"+
    "\1\0\1\73\1\74\64\73\1\75\10\0\1\75\6\0"+
    "\2\75\4\0\6\75\3\0\26\75\3\0\1\75\22\0"+
    "\1\173\52\0\1\77\10\0\1\77\6\0\2\77\4\0"+
    "\6\77\3\0\26\77\3\0\1\77\22\0\1\174\110\0"+
    "\1\175\34\0\1\77\10\0\1\77\6\0\2\77\4\0"+
    "\6\77\3\0\23\77\1\176\2\77\3\0\1\77\2\0"+
    "\1\77\10\0\1\77\6\0\2\77\4\0\6\77\3\0"+
    "\1\77\1\177\24\77\3\0\1\77\2\0\1\115\10\0"+
    "\1\115\6\0\2\115\4\0\6\115\3\0\26\115\3\0"+
    "\1\115\2\0\1\75\10\0\1\75\6\0\2\75\4\0"+
    "\6\75\3\0\20\75\1\200\2\75\1\201\2\75\3\0"+
    "\1\75\2\0\7\123\1\202\25\123\1\203\35\123\13\124"+
    "\1\202\21\124\1\204\35\124\1\125\10\0\1\125\6\0"+
    "\2\125\4\0\6\125\3\0\26\125\3\0\1\125\3\0"+
    "\2\126\1\0\1\126\1\0\1\126\140\0\1\205\72\0"+
    "\1\206\62\0\1\207\66\0\1\210\114\0\1\211\11\0"+
    "\2\134\1\0\1\134\1\0\1\134\124\0\1\212\111\0"+
    "\1\213\25\0\1\140\6\0\1\140\4\0\6\140\3\0"+
    "\26\140\6\0\1\141\10\0\1\141\6\0\2\141\4\0"+
    "\6\141\3\0\26\141\3\0\1\141\3\0\2\142\1\0"+
    "\1\142\1\0\1\142\112\0\6\214\37\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\21\50\1\215"+
    "\4\50\3\0\1\50\2\0\1\50\10\0\1\50\6\0"+
    "\2\50\4\0\6\50\3\0\20\50\1\216\5\50\3\0"+
    "\1\50\2\0\1\50\10\0\1\50\6\0\2\50\4\0"+
    "\6\50\3\0\23\50\1\217\2\50\3\0\1\50\2\0"+
    "\1\50\10\0\1\50\6\0\2\50\4\0\6\50\3\0"+
    "\3\50\1\220\22\50\3\0\1\50\2\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\13\50\1\221"+
    "\12\50\3\0\1\50\2\0\1\50\10\0\1\50\6\0"+
    "\2\50\4\0\6\50\3\0\7\50\1\222\16\50\3\0"+
    "\1\50\2\0\1\50\10\0\1\50\6\0\2\50\4\0"+
    "\6\50\3\0\11\50\1\223\14\50\3\0\1\50\2\0"+
    "\1\50\10\0\1\50\6\0\2\50\4\0\6\50\3\0"+
    "\1\50\1\224\24\50\3\0\1\50\2\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\23\50\1\225"+
    "\2\50\3\0\1\50\2\0\1\50\10\0\1\50\6\0"+
    "\2\50\4\0\6\50\3\0\5\50\1\226\20\50\3\0"+
    "\1\50\2\0\1\50\10\0\1\50\6\0\2\50\4\0"+
    "\6\50\3\0\14\50\1\227\11\50\3\0\1\50\2\0"+
    "\1\50\10\0\1\50\6\0\2\50\4\0\6\50\3\0"+
    "\14\50\1\230\11\50\3\0\1\50\2\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\4\50\1\231"+
    "\21\50\3\0\1\50\2\0\1\50\10\0\1\50\6\0"+
    "\2\50\4\0\6\50\3\0\5\50\1\232\20\50\3\0"+
    "\1\50\2\0\1\50\10\0\1\50\6\0\2\50\4\0"+
    "\6\50\3\0\20\50\1\233\5\50\3\0\1\50\2\0"+
    "\1\50\10\0\1\50\6\0\2\50\4\0\6\50\3\0"+
    "\11\50\1\234\3\50\1\235\10\50\3\0\1\50\2\0"+
    "\1\50\10\0\1\50\6\0\2\50\4\0\6\50\3\0"+
    "\2\50\1\236\23\50\3\0\1\50\2\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\22\50\1\237"+
    "\3\50\3\0\1\50\2\0\1\50\10\0\1\50\6\0"+
    "\2\50\4\0\6\50\3\0\5\50\1\240\20\50\3\0"+
    "\1\50\2\0\1\50\10\0\1\50\6\0\2\50\4\0"+
    "\6\50\3\0\16\50\1\241\7\50\3\0\1\50\2\0"+
    "\1\50\10\0\1\50\6\0\2\50\4\0\6\50\3\0"+
    "\16\50\1\242\7\50\3\0\1\50\2\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\20\50\1\243"+
    "\5\50\3\0\1\50\22\0\1\244\72\0\1\245\52\0"+
    "\1\77\10\0\1\77\6\0\2\77\4\0\6\77\3\0"+
    "\14\77\1\246\11\77\3\0\1\77\2\0\1\77\10\0"+
    "\1\77\6\0\2\77\4\0\6\77\3\0\20\77\1\247"+
    "\5\77\3\0\1\77\2\0\1\75\10\0\1\75\6\0"+
    "\2\75\4\0\6\75\3\0\11\75\1\250\3\75\1\251"+
    "\10\75\3\0\1\75\2\0\1\75\10\0\1\75\6\0"+
    "\2\75\4\0\6\75\3\0\2\75\1\252\23\75\3\0"+
    "\1\75\2\0\1\123\1\0\1\123\1\0\2\123\1\0"+
    "\61\123\2\0\1\123\1\124\1\0\1\124\1\0\2\124"+
    "\1\0\61\124\2\0\1\124\43\0\1\253\106\0\1\254"+
    "\53\0\1\255\113\0\1\256\55\0\1\257\77\0\1\260"+
    "\103\0\1\261\36\0\6\214\2\0\1\262\34\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\3\50"+
    "\1\263\22\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\1\50\1\264\24\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\22\50\1\265\3\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\23\50\1\266\2\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\13\50"+
    "\1\267\12\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\21\50\1\270\4\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\1\50\1\271\24\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\21\50\1\272\4\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\13\50"+
    "\1\273\12\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\12\50\1\274\13\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\5\50\1\275\20\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\7\50\1\276\16\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\23\50"+
    "\1\277\2\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\20\50\1\300\5\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\1\50\1\301\24\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\24\50\1\302\1\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\22\50"+
    "\1\303\3\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\12\50\1\304\13\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\23\50\1\305\2\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\16\50\1\306\7\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\5\50"+
    "\1\307\20\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\1\50\1\310\24\50"+
    "\3\0\1\50\2\0\1\77\10\0\1\77\6\0\2\77"+
    "\4\0\6\77\3\0\1\77\1\311\24\77\3\0\1\77"+
    "\2\0\1\75\10\0\1\75\6\0\2\75\4\0\6\75"+
    "\3\0\24\75\1\312\1\75\3\0\1\75\2\0\1\75"+
    "\10\0\1\75\6\0\2\75\4\0\6\75\3\0\22\75"+
    "\1\313\3\75\3\0\1\75\2\0\1\75\10\0\1\75"+
    "\6\0\2\75\4\0\6\75\3\0\12\75\1\314\13\75"+
    "\3\0\1\75\66\0\1\315\60\0\1\316\63\0\1\317"+
    "\76\0\1\320\102\0\1\321\73\0\1\322\56\0\1\323"+
    "\64\0\1\262\34\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\20\50\1\324\5\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\13\50\1\325\12\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\5\50"+
    "\1\326\20\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\20\50\1\327\5\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\1\50\1\330\24\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\21\50\1\331\4\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\21\50"+
    "\1\332\4\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\4\50\1\333\21\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\20\50\1\334\5\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\23\50\1\335\2\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\12\50"+
    "\1\336\13\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\12\50\1\337\13\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\13\50\1\340\12\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\1\50\1\341\24\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\5\50"+
    "\1\342\20\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\11\50\1\343\14\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\20\50\1\344\5\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\20\50\1\345\5\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\20\50"+
    "\1\346\5\50\3\0\1\50\2\0\1\77\10\0\1\77"+
    "\6\0\2\77\4\0\6\77\3\0\20\77\1\347\5\77"+
    "\3\0\1\77\2\0\1\75\10\0\1\75\6\0\2\75"+
    "\4\0\6\75\3\0\1\75\1\350\24\75\3\0\1\75"+
    "\2\0\1\75\10\0\1\75\6\0\2\75\4\0\6\75"+
    "\3\0\5\75\1\351\20\75\3\0\1\75\2\0\1\75"+
    "\10\0\1\75\6\0\2\75\4\0\6\75\3\0\11\75"+
    "\1\352\14\75\3\0\1\75\31\0\1\353\107\0\1\354"+
    "\112\0\1\355\52\0\1\356\26\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\11\50\1\357\14\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\20\50\1\360\5\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\11\50\1\361\14\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\20\50"+
    "\1\362\5\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\11\50\1\363\14\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\1\50\1\364\24\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\5\50\1\365\20\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\15\50"+
    "\1\366\10\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\22\50\1\367\3\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\3\50\1\370\22\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\3\50\1\371\22\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\14\50"+
    "\1\372\11\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\5\50\1\373\20\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\7\50\1\374\16\50\3\0\1\50"+
    "\2\0\1\77\10\0\1\77\6\0\2\77\4\0\6\77"+
    "\3\0\7\77\1\375\16\77\3\0\1\77\2\0\1\75"+
    "\10\0\1\75\6\0\2\75\4\0\6\75\3\0\22\75"+
    "\1\376\3\75\3\0\1\75\2\0\1\75\10\0\1\75"+
    "\6\0\2\75\4\0\6\75\3\0\3\75\1\377\22\75"+
    "\3\0\1\75\2\0\1\75\10\0\1\75\6\0\2\75"+
    "\4\0\6\75\3\0\3\75\1\u0100\22\75\3\0\1\75"+
    "\42\0\1\u0101\111\0\1\u0102\13\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\16\50\1\u0103\7\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\22\50\1\u0104\3\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\25\50\1\u0105\3\0\1\50\2\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\3\50\1\u0106"+
    "\22\50\3\0\1\50\2\0\1\50\10\0\1\50\6\0"+
    "\2\50\4\0\6\50\3\0\7\50\1\u0107\16\50\3\0"+
    "\1\50\2\0\1\50\10\0\1\50\6\0\2\50\4\0"+
    "\6\50\3\0\1\50\1\u0108\24\50\3\0\1\50\2\0"+
    "\1\50\10\0\1\50\6\0\2\50\4\0\6\50\3\0"+
    "\5\50\1\u0109\20\50\3\0\1\50\2\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\22\50\1\u010a"+
    "\3\50\3\0\1\50\2\0\1\50\10\0\1\50\6\0"+
    "\2\50\4\0\6\50\3\0\21\50\1\u010b\4\50\3\0"+
    "\1\50\2\0\1\75\10\0\1\75\6\0\2\75\4\0"+
    "\6\75\3\0\5\75\1\u010c\20\75\3\0\1\75\2\0"+
    "\1\75\10\0\1\75\6\0\2\75\4\0\6\75\3\0"+
    "\22\75\1\u010d\3\75\3\0\1\75\63\0\1\u010e\11\0"+
    "\1\50\10\0\1\50\6\0\2\50\4\0\6\50\3\0"+
    "\22\50\1\u010f\3\50\3\0\1\50\2\0\1\50\10\0"+
    "\1\50\6\0\2\50\4\0\6\50\3\0\25\50\1\u0110"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\5\50\1\u0111\20\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\4\50\1\u0112\21\50\3\0\1\50\2\0\1\50"+
    "\10\0\1\50\6\0\2\50\4\0\6\50\3\0\5\50"+
    "\1\u0113\20\50\3\0\1\50\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\21\50\1\u0114\4\50"+
    "\3\0\1\50\2\0\1\75\10\0\1\75\6\0\2\75"+
    "\4\0\6\75\3\0\5\75\1\u0115\20\75\3\0\1\75"+
    "\42\0\1\u0116\32\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\11\50\1\u0117\14\50\3\0\1\50"+
    "\2\0\1\50\10\0\1\50\6\0\2\50\4\0\6\50"+
    "\3\0\4\50\1\u0118\21\50\3\0\1\50\2\0\1\75"+
    "\10\0\1\75\6\0\2\75\4\0\6\75\3\0\4\75"+
    "\1\u0119\21\75\3\0\1\75\2\0\1\50\10\0\1\50"+
    "\6\0\2\50\4\0\6\50\3\0\15\50\1\u011a\10\50"+
    "\3\0\1\50\2\0\1\50\10\0\1\50\6\0\2\50"+
    "\4\0\6\50\3\0\14\50\1\u011b\11\50\3\0\1\50"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13039];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\23\0\1\11\1\1\2\11\2\1\2\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\30\1\3\11"+
    "\1\1\3\11\3\1\3\11\1\1\1\11\1\1\3\11"+
    "\12\1\1\11\35\1\2\0\1\11\4\1\1\11\12\0"+
    "\27\1\2\11\5\1\7\0\33\1\1\11\2\0\1\11"+
    "\2\0\1\11\27\1\2\0\2\11\22\1\1\0\1\11"+
    "\13\1\1\0\7\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    private Stack<Integer> _stack = new Stack<>();
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void pushState(int state) {
        _stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        var state = _stack.pop();
        yybegin(state);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 77: break;
          case 2:
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            }
          // fall through
          case 78: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 79: break;
          case 4:
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 80: break;
          case 5:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 81: break;
          case 6:
            { yybegin(xTAG_NAME); return AT;
            }
          // fall through
          case 82: break;
          case 7:
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 83: break;
          case 8:
            { return SHARP;
            }
          // fall through
          case 84: break;
          case 9:
            { return ID;
            }
          // fall through
          case 85: break;
          case 10:
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            }
          // fall through
          case 86: break;
          case 11:
            { pushState(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 87: break;
          case 12:
            { yybegin(xCOMMENT_STRING); return ID;
            }
          // fall through
          case 88: break;
          case 13:
            { pushState(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 89: break;
          case 14:
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            }
          // fall through
          case 90: break;
          case 15:
            { beginType(); return ID;
            }
          // fall through
          case 91: break;
          case 16:
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            }
          // fall through
          case 92: break;
          case 17:
            { _typeLevel++; return LPAREN;
            }
          // fall through
          case 93: break;
          case 18:
            { _typeLevel--; _typeReq = false; return RPAREN;
            }
          // fall through
          case 94: break;
          case 19:
            { _typeReq = true; return COMMA;
            }
          // fall through
          case 95: break;
          case 20:
            { _typeReq = true; return EXTENDS;
            }
          // fall through
          case 96: break;
          case 21:
            { _typeLevel++; return LT;
            }
          // fall through
          case 97: break;
          case 22:
            { _typeLevel--; _typeReq = false; return GT;
            }
          // fall through
          case 98: break;
          case 23:
            { _typeLevel++; return LCURLY;
            }
          // fall through
          case 99: break;
          case 24:
            { _typeReq = true; return OR;
            }
          // fall through
          case 100: break;
          case 25:
            { _typeLevel--; _typeReq = false; return RCURLY;
            }
          // fall through
          case 101: break;
          case 26:
            { yybegin(xCLASS_EXTEND); return ID;
            }
          // fall through
          case 102: break;
          case 27:
            { beginType(); return EXTENDS;
            }
          // fall through
          case 103: break;
          case 28:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 104: break;
          case 29:
            { return COMMA;
            }
          // fall through
          case 105: break;
          case 30:
            { return EXTENDS;
            }
          // fall through
          case 106: break;
          case 31:
            { popState(); return STRING_LITERAL;
            }
          // fall through
          case 107: break;
          case 32:
            { yybegin(xSWAG_QUERY_TYPE); return ID;
            }
          // fall through
          case 108: break;
          case 33:
            { yybegin(xSWAG_QUERY_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 109: break;
          case 34:
            { yybegin(xSWAG_QUERY_TY); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 35:
            { yybegin(xSWAG_QUERY_TY); return LCURLY;
            }
          // fall through
          case 111: break;
          case 36:
            { yybegin(xSWAG_METHOD); return  URL;
            }
          // fall through
          case 112: break;
          case 37:
            { yybegin(YYINITIAL); return ID;
            }
          // fall through
          case 113: break;
          case 38:
            { yybegin(xSWAG_METHOD); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 114: break;
          case 39:
            { return DASHES;
            }
          // fall through
          case 115: break;
          case 40:
            { _typeReq = false; return ARR;
            }
          // fall through
          case 116: break;
          case 41:
            { yybegin(xTAG); return TAG_NAME_SEE;
            }
          // fall through
          case 117: break;
          case 42:
            { return FUN;
            }
          // fall through
          case 118: break;
          case 43:
            { return  HTTP_METHOD_SWAG;
            }
          // fall through
          case 119: break;
          case 44:
            { yybegin(xSWAG_TAGS); return TAG_NAME_SWAGTAGS;
            }
          // fall through
          case 120: break;
          case 45:
            { yybegin(xCLASS); return TAG_NAME_ENUM;
            }
          // fall through
          case 121: break;
          case 46:
            { beginType(); return TAG_NAME_TYPE;
            }
          // fall through
          case 122: break;
          case 47:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_BODY;
            }
          // fall through
          case 123: break;
          case 48:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_PATH;
            }
          // fall through
          case 124: break;
          case 49:
            { yybegin(xCOMMENT_STRING); return SWAGPARAM_TRUE;
            }
          // fall through
          case 125: break;
          case 50:
            { yybegin(xSWAG_PARAMS); return TAG_NAME_SWAGPARAM;
            }
          // fall through
          case 126: break;
          case 51:
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            }
          // fall through
          case 127: break;
          case 52:
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            }
          // fall through
          case 128: break;
          case 53:
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            }
          // fall through
          case 129: break;
          case 54:
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            }
          // fall through
          case 130: break;
          case 55:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_QUERY;
            }
          // fall through
          case 131: break;
          case 56:
            { yybegin(xCOMMENT_STRING); return SWAGPARAM_FALSE;
            }
          // fall through
          case 132: break;
          case 57:
            { yybegin(xSWAG_ROUTER); return TAG_NAME_SWAGROUTER;
            }
          // fall through
          case 133: break;
          case 58:
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            }
          // fall through
          case 134: break;
          case 59:
            { return TAG_NAME_PUBLIC;
            }
          // fall through
          case 135: break;
          case 60:
            { beginType(); return TAG_NAME_RETURN;
            }
          // fall through
          case 136: break;
          case 61:
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            }
          // fall through
          case 137: break;
          case 62:
            { _typeReq = true; return VARARG;
            }
          // fall through
          case 138: break;
          case 63:
            { yybegin(xFIELD_ID); return PUBLIC;
            }
          // fall through
          case 139: break;
          case 64:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_HEADER;
            }
          // fall through
          case 140: break;
          case 65:
            { yybegin(xSWAG_SUMMARY); return TAG_NAME_SWAGSUMMARY;
            }
          // fall through
          case 141: break;
          case 66:
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            }
          // fall through
          case 142: break;
          case 67:
            { return TAG_NAME_PRIVATE;
            }
          // fall through
          case 143: break;
          case 68:
            { yybegin(xFIELD_ID); return PRIVATE;
            }
          // fall through
          case 144: break;
          case 69:
            { yybegin(xSWAG_SIGN); return TAG_NAME_SIGN;
            }
          // fall through
          case 145: break;
          case 70:
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            }
          // fall through
          case 146: break;
          case 71:
            { beginType(); return TAG_NAME_OVERLOAD;
            }
          // fall through
          case 147: break;
          case 72:
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            }
          // fall through
          case 148: break;
          case 73:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_FORM;
            }
          // fall through
          case 149: break;
          case 74:
            { return TAG_NAME_PROTECTED;
            }
          // fall through
          case 150: break;
          case 75:
            { yybegin(xFIELD_ID); return PROTECTED;
            }
          // fall through
          case 151: break;
          case 76:
            { yybegin(xSWAG_DES); return TAG_NAME_SWAGDES;
            }
          // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

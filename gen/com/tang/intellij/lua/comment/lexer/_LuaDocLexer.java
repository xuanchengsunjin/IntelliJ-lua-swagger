// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: doc.flex

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;
import java.util.Stack;

public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xTYPE_REF = 12;
  public static final int xCLASS = 14;
  public static final int xCLASS_EXTEND = 16;
  public static final int xFIELD = 18;
  public static final int xFIELD_ID = 20;
  public static final int xGENERIC = 22;
  public static final int xALIAS = 24;
  public static final int xSUPPRESS = 26;
  public static final int xDOUBLE_QUOTED_STRING = 28;
  public static final int xSINGLE_QUOTED_STRING = 30;
  public static final int xSWAG_TAGS = 32;
  public static final int xSWAG_PARAMS = 34;
  public static final int xSWAG_SUMMARY = 36;
  public static final int xSWAG_QUERY_TYPE = 38;
  public static final int xSWAG_QUERY_TY = 40;
  public static final int xSWAG_QUERY_OPTIONAL = 42;
  public static final int xSWAG_ROUTER = 44;
  public static final int xSWAG_DES = 46;
  public static final int xSWAG_SIGN = 48;
  public static final int xSWAG_METHOD = 50;
  public static final int xSWAG_RESPONSE = 52;
  public static final int xSWAG_RESPONSE_TYPE = 54;
  public static final int xSWAG_RESPONSE_TY = 56;
  public static final int xSWAG_COMON_NOTE = 58;
  public static final int xSWAG_HEADER = 60;
  public static final int xSWAG_HEADER_TYPE = 62;
  public static final int xSWAG_HEADER_TY = 64;
  public static final int xSWAG_SIGN_NAME = 66;
  public static final int xSWAG_QUERY_COMMY_TY = 68;
  public static final int xSWAG_SERVER = 70;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 16, 16, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 
    30, 30, 31, 31, 32, 32, 33, 33
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\5\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\2\5\1\16\1\17\1\20\1\21\1\22"+
    "\5\23\4\22\1\24\1\5\1\25\1\12\1\26\1\12"+
    "\1\27\3\30\1\31\3\30\1\32\7\30\1\33\1\30"+
    "\1\34\1\35\1\36\6\30\1\37\1\40\1\41\1\5"+
    "\1\42\1\5\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\2\42\1\71\1\42\1\72\1\73\1\74\1\5\6\0"+
    "\1\75\32\0\1\76\1\5\4\11\4\5\1\11\2\5"+
    "\1\0\7\5\1\11\4\5\1\11\5\5\27\11\1\5"+
    "\37\11\1\5\u01ca\11\4\5\14\11\16\5\5\11\7\5"+
    "\1\11\1\5\1\11\21\5\160\0\5\11\1\5\2\11"+
    "\2\5\4\11\1\5\1\11\6\5\1\11\1\5\3\11"+
    "\1\5\1\11\1\5\24\11\1\5\123\11\1\5\213\11"+
    "\1\5\5\0\2\5\246\11\1\5\46\11\2\5\1\11"+
    "\6\5\51\11\6\5\1\11\1\5\55\0\1\5\1\0"+
    "\1\5\2\0\1\5\2\0\1\5\1\0\10\5\33\11"+
    "\4\5\4\11\15\5\6\0\5\5\1\11\4\5\13\0"+
    "\1\5\1\0\3\5\53\11\37\0\4\5\2\11\1\0"+
    "\143\11\1\5\1\11\10\0\1\5\6\0\2\11\2\0"+
    "\1\5\4\0\2\11\12\0\3\11\2\5\1\11\17\5"+
    "\1\0\1\11\1\0\36\11\33\0\2\5\131\11\13\0"+
    "\1\11\16\5\12\0\41\11\11\0\2\11\4\5\1\11"+
    "\2\5\1\0\30\11\4\0\1\11\11\0\1\11\3\0"+
    "\1\11\5\0\22\5\31\11\3\0\4\5\13\11\65\5"+
    "\25\11\1\5\22\11\13\5\61\0\66\11\3\0\1\11"+
    "\22\0\1\11\7\0\12\11\2\0\2\5\12\0\1\5"+
    "\20\11\3\0\1\5\10\11\2\5\2\11\2\5\26\11"+
    "\1\5\7\11\1\5\1\11\3\5\4\11\2\5\1\0"+
    "\1\11\7\0\2\5\2\0\2\5\3\0\1\11\10\5"+
    "\1\0\4\5\2\11\1\5\3\11\2\0\2\5\12\0"+
    "\4\11\7\5\2\11\1\5\1\0\2\5\3\0\1\5"+
    "\6\11\4\5\2\11\2\5\26\11\1\5\7\11\1\5"+
    "\2\11\1\5\2\11\1\5\2\11\2\5\1\0\1\5"+
    "\5\0\4\5\2\0\2\5\3\0\3\5\1\0\7\5"+
    "\4\11\1\5\1\11\7\5\14\0\3\11\1\0\13\5"+
    "\3\0\1\5\11\11\1\5\3\11\1\5\26\11\1\5"+
    "\7\11\1\5\2\11\1\5\5\11\2\5\1\0\1\11"+
    "\10\0\1\5\3\0\1\5\3\0\2\5\1\11\17\5"+
    "\2\11\2\0\2\5\12\0\1\5\1\11\7\5\1\11"+
    "\6\0\1\5\3\0\1\5\10\11\2\5\2\11\2\5"+
    "\26\11\1\5\7\11\1\5\2\11\1\5\5\11\2\5"+
    "\1\0\1\11\7\0\2\5\2\0\2\5\3\0\7\5"+
    "\3\0\4\5\2\11\1\5\3\11\2\0\2\5\12\0"+
    "\1\5\1\11\20\5\1\0\1\11\1\5\6\11\3\5"+
    "\3\11\1\5\4\11\3\5\2\11\1\5\1\11\1\5"+
    "\2\11\3\5\2\11\3\5\3\11\3\5\14\11\4\5"+
    "\5\0\3\5\3\0\1\5\4\0\2\5\1\11\6\5"+
    "\1\0\16\5\12\0\11\5\1\11\6\5\5\0\10\11"+
    "\1\5\3\11\1\5\27\11\1\5\20\11\3\5\1\11"+
    "\7\0\1\5\3\0\1\5\4\0\7\5\2\0\1\5"+
    "\3\11\5\5\2\11\2\0\2\5\12\0\20\5\1\11"+
    "\3\0\1\5\10\11\1\5\3\11\1\5\27\11\1\5"+
    "\12\11\1\5\5\11\2\5\1\0\1\11\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\7\5\1\11\1\5"+
    "\2\11\2\0\2\5\12\0\1\5\2\11\15\5\4\0"+
    "\11\11\1\5\3\11\1\5\51\11\2\0\1\11\7\0"+
    "\1\5\3\0\1\5\4\0\1\11\5\5\3\11\1\0"+
    "\7\5\3\11\2\0\2\5\12\0\12\5\6\11\1\5"+
    "\3\0\1\5\22\11\3\5\30\11\1\5\11\11\1\5"+
    "\1\11\2\5\7\11\3\5\1\0\4\5\6\0\1\5"+
    "\1\0\1\5\10\0\6\5\12\0\2\5\2\0\15\5"+
    "\60\11\1\0\2\11\7\0\4\5\10\11\10\0\1\5"+
    "\12\0\47\5\2\11\1\5\1\11\1\5\5\11\1\5"+
    "\30\11\1\5\1\11\1\5\12\11\1\0\2\11\11\0"+
    "\1\11\2\5\5\11\1\5\1\11\1\5\6\0\2\5"+
    "\12\0\2\5\4\11\40\5\1\11\27\5\2\0\6\5"+
    "\12\0\13\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\2\0\10\11\1\5\44\11\4\5\24\0\1\5\2\0"+
    "\5\11\13\0\1\5\44\0\11\5\1\0\71\5\53\11"+
    "\24\0\1\11\12\0\6\5\6\11\4\0\4\11\3\0"+
    "\1\11\3\0\2\11\7\0\3\11\4\0\15\11\14\0"+
    "\1\11\17\0\2\5\46\11\1\5\1\11\5\5\1\11"+
    "\2\5\53\11\1\5\115\11\1\5\4\11\2\5\7\11"+
    "\1\5\1\11\1\5\4\11\2\5\51\11\1\5\4\11"+
    "\2\5\41\11\1\5\4\11\2\5\7\11\1\5\1\11"+
    "\1\5\4\11\2\5\17\11\1\5\71\11\1\5\4\11"+
    "\2\5\103\11\2\5\3\0\40\5\20\11\20\5\126\11"+
    "\2\5\6\11\3\5\u016c\11\2\5\21\11\1\76\32\11"+
    "\5\5\113\11\3\5\13\11\7\5\15\11\1\5\4\11"+
    "\3\0\13\5\22\11\3\0\13\5\22\11\2\0\14\5"+
    "\15\11\1\5\3\11\1\5\2\0\14\5\64\11\40\0"+
    "\3\5\1\11\3\5\2\11\1\0\2\5\12\0\41\5"+
    "\4\0\1\5\12\0\6\5\131\11\7\5\5\11\2\0"+
    "\42\11\1\0\1\11\5\5\106\11\12\5\37\11\1\5"+
    "\14\0\4\5\14\0\12\5\12\0\36\11\2\5\5\11"+
    "\13\5\54\11\4\5\32\11\6\5\12\0\46\5\27\11"+
    "\5\0\4\5\65\11\12\0\1\5\35\0\2\5\13\0"+
    "\6\5\12\0\15\5\1\11\10\5\16\0\1\5\2\0"+
    "\77\5\5\0\57\11\21\0\7\11\4\5\12\0\21\5"+
    "\11\0\14\5\3\0\36\11\15\0\2\11\12\0\54\11"+
    "\16\0\14\5\44\11\24\0\10\5\12\0\3\5\3\11"+
    "\12\0\44\11\2\5\11\11\7\5\53\11\2\5\3\11"+
    "\20\5\3\0\1\5\25\0\4\11\1\0\6\11\1\0"+
    "\2\11\3\0\1\11\5\5\300\11\72\0\1\5\5\0"+
    "\26\11\2\5\6\11\2\5\46\11\2\5\6\11\2\5"+
    "\10\11\1\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\37\11\2\5\65\11\1\5\7\11\1\5\1\11\3\5"+
    "\3\11\1\5\7\11\3\5\4\11\2\5\6\11\4\5"+
    "\15\11\5\5\3\11\1\5\7\11\3\5\13\76\5\0"+
    "\30\5\2\3\5\0\1\76\17\5\2\11\23\5\1\11"+
    "\12\5\1\76\5\0\1\5\12\0\1\5\1\11\15\5"+
    "\1\11\20\5\15\11\3\5\40\11\20\5\15\0\4\5"+
    "\1\0\3\5\14\0\21\5\1\11\4\5\1\11\2\5"+
    "\12\11\1\5\1\11\3\5\5\11\6\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\4\11\1\5\13\11\2\5"+
    "\4\11\5\5\5\11\4\5\1\11\21\5\51\11\u0177\5"+
    "\57\11\1\5\57\11\1\5\205\11\6\5\4\11\3\0"+
    "\2\11\14\5\46\11\1\5\1\11\5\5\1\11\2\5"+
    "\70\11\7\5\1\11\17\5\1\0\27\11\11\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\40\0"+
    "\57\5\1\11\320\5\1\76\4\5\3\11\31\5\11\11"+
    "\6\0\1\5\5\11\2\5\5\11\4\5\126\11\2\5"+
    "\2\0\2\5\3\11\1\5\132\11\1\5\4\11\5\5"+
    "\53\11\1\5\136\11\21\5\40\11\60\5\320\11\100\5"+
    "\375\11\3\5\215\11\103\5\56\11\2\5\15\11\3\5"+
    "\20\11\12\0\2\11\24\5\57\11\1\0\4\5\12\0"+
    "\1\5\37\11\2\0\120\11\2\0\45\5\11\11\2\5"+
    "\147\11\2\5\65\11\2\5\11\11\52\5\15\11\1\0"+
    "\3\11\1\0\4\11\1\0\27\11\5\0\4\5\1\0"+
    "\13\5\1\11\7\5\64\11\14\5\2\0\62\11\22\0"+
    "\12\5\12\0\6\5\22\0\6\11\3\5\1\11\1\5"+
    "\2\11\13\0\34\11\10\0\2\5\27\11\15\0\14\5"+
    "\35\11\3\5\4\0\57\11\16\0\16\5\1\11\12\0"+
    "\6\5\5\11\1\0\12\11\12\0\5\11\1\5\51\11"+
    "\16\0\11\5\3\11\1\0\10\11\2\0\2\5\12\0"+
    "\6\5\27\11\3\5\1\11\3\0\62\11\1\0\1\11"+
    "\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11"+
    "\30\5\3\11\2\5\13\11\5\0\2\5\3\11\2\0"+
    "\12\5\6\11\2\5\6\11\2\5\6\11\11\5\7\11"+
    "\1\5\7\11\1\5\53\11\1\5\16\11\6\5\163\11"+
    "\10\0\1\5\2\0\2\5\12\0\6\5\244\11\14\5"+
    "\27\11\4\5\61\11\4\5\u0100\77\156\11\2\5\152\11"+
    "\46\5\7\11\14\5\5\11\5\5\1\11\1\0\12\11"+
    "\1\5\15\11\1\5\5\11\1\5\1\11\1\5\2\11"+
    "\1\5\2\11\1\5\154\11\41\5\153\11\22\5\100\11"+
    "\2\5\66\11\50\5\15\11\3\5\20\0\20\5\20\0"+
    "\3\5\2\11\30\5\3\11\31\5\1\11\6\5\5\11"+
    "\1\5\207\11\2\5\1\0\4\5\1\11\13\5\12\0"+
    "\7\5\32\11\4\5\1\11\1\5\32\11\13\5\131\11"+
    "\3\5\6\11\2\5\6\11\2\5\6\11\2\5\3\11"+
    "\3\5\2\11\3\5\2\11\22\5\3\0\4\5\14\11"+
    "\1\5\32\11\1\5\23\11\1\5\2\11\1\5\17\11"+
    "\2\5\16\11\42\5\173\11\105\5\65\11\210\5\1\0"+
    "\202\5\35\11\3\5\61\11\17\5\1\0\37\5\40\11"+
    "\15\5\36\11\5\5\46\11\5\0\5\5\36\11\2\5"+
    "\44\11\4\5\10\11\1\5\5\11\52\5\236\11\2\5"+
    "\12\0\6\5\44\11\4\5\44\11\4\5\50\11\10\5"+
    "\64\11\234\5\67\11\11\5\26\11\12\5\10\11\230\5"+
    "\6\11\2\5\1\11\1\5\54\11\1\5\2\11\3\5"+
    "\1\11\2\5\27\11\12\5\27\11\11\5\37\11\101\5"+
    "\23\11\1\5\2\11\12\5\26\11\12\5\32\11\106\5"+
    "\70\11\6\5\2\11\100\5\1\11\3\0\1\5\2\0"+
    "\5\5\4\0\4\11\1\5\3\11\1\5\35\11\2\5"+
    "\3\0\4\5\1\0\40\5\35\11\3\5\35\11\43\5"+
    "\10\11\1\5\34\11\2\0\31\5\66\11\12\5\26\11"+
    "\12\5\23\11\15\5\22\11\156\5\111\11\67\5\63\11"+
    "\15\5\63\11\15\5\44\11\4\0\10\5\12\0\u0146\5"+
    "\52\11\1\5\2\0\3\5\2\11\116\5\35\11\12\5"+
    "\1\11\10\5\26\11\13\0\137\5\25\11\33\5\27\11"+
    "\11\5\3\0\65\11\17\0\37\5\12\0\17\5\4\0"+
    "\55\11\13\0\2\5\1\0\17\5\1\0\2\5\31\11"+
    "\7\5\12\0\6\5\3\0\44\11\16\0\1\5\12\0"+
    "\4\5\1\11\2\0\1\11\10\5\43\11\1\0\2\5"+
    "\1\11\11\5\3\0\60\11\16\0\4\11\4\5\4\0"+
    "\1\5\14\0\1\11\1\5\1\11\43\5\22\11\1\5"+
    "\31\11\14\0\6\5\1\0\101\5\7\11\1\5\1\11"+
    "\1\5\4\11\1\5\17\11\1\5\12\11\7\5\57\11"+
    "\14\0\5\5\12\0\6\5\4\0\1\5\10\11\2\5"+
    "\2\11\2\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\5\11\1\5\2\0\1\11\7\0\2\5\2\0\2\5"+
    "\3\0\2\5\1\11\6\5\1\0\5\5\5\11\2\0"+
    "\2\5\7\0\3\5\5\0\213\5\65\11\22\0\4\11"+
    "\5\5\12\0\4\5\1\0\3\11\36\5\60\11\24\0"+
    "\2\11\1\5\1\11\10\5\12\0\246\5\57\11\7\0"+
    "\2\5\11\0\27\5\4\11\2\0\42\5\60\11\21\0"+
    "\3\5\1\11\13\5\12\0\46\5\53\11\15\0\1\11"+
    "\7\5\12\0\66\5\33\11\2\5\17\0\4\5\12\0"+
    "\306\5\54\11\17\0\145\5\100\11\12\0\25\5\10\11"+
    "\2\5\1\11\2\5\10\11\1\5\2\11\1\5\30\11"+
    "\6\0\1\5\2\0\2\5\4\0\1\11\1\0\1\11"+
    "\2\0\14\5\12\0\106\5\10\11\2\5\47\11\7\0"+
    "\2\5\7\0\1\11\1\5\1\11\1\0\33\5\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\5\1\0\10\5"+
    "\1\11\13\0\56\11\20\0\3\5\1\11\42\5\71\11"+
    "\7\5\11\11\1\5\45\11\10\0\1\5\10\0\1\11"+
    "\17\5\12\0\30\5\36\11\2\5\26\0\1\5\16\0"+
    "\111\5\7\11\1\5\2\11\1\5\46\11\6\0\3\5"+
    "\1\0\1\5\2\0\1\5\7\0\1\11\1\0\10\5"+
    "\12\0\6\5\6\11\1\5\2\11\1\5\40\11\5\0"+
    "\1\5\2\0\1\5\5\0\1\11\7\5\12\0\u0136\5"+
    "\23\11\4\0\271\5\1\11\54\5\4\11\37\5\232\11"+
    "\146\5\157\11\21\5\304\11\274\5\57\11\1\5\11\0"+
    "\307\5\107\11\271\5\71\11\7\5\37\11\1\5\12\0"+
    "\146\5\36\11\2\5\5\0\13\5\60\11\7\0\11\5"+
    "\4\11\14\5\12\0\11\5\25\11\5\5\23\11\260\5"+
    "\100\11\200\5\113\11\4\5\1\0\1\11\67\0\7\5"+
    "\4\0\15\11\100\5\2\11\1\5\1\11\1\0\13\5"+
    "\2\0\16\5\370\11\10\5\326\11\52\5\11\11\367\5"+
    "\37\11\61\5\3\11\21\5\4\11\10\5\u018c\11\4\5"+
    "\153\11\5\5\15\11\3\5\11\11\7\5\12\11\3\5"+
    "\2\0\1\5\4\0\301\5\5\0\3\5\26\0\2\5"+
    "\7\0\36\5\4\0\224\5\3\0\273\5\125\11\1\5"+
    "\107\11\1\5\2\11\2\5\1\11\2\5\2\11\2\5"+
    "\4\11\1\5\14\11\1\5\1\11\1\5\7\11\1\5"+
    "\101\11\1\5\4\11\2\5\10\11\1\5\7\11\1\5"+
    "\34\11\1\5\4\11\1\5\5\11\1\5\1\11\3\5"+
    "\7\11\1\5\u0154\11\2\5\31\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\10\11\2\5\151\0\4\5\62\0\10\5\1\0\16\5"+
    "\1\0\26\5\5\0\1\5\17\0\120\5\7\0\1\5"+
    "\21\0\2\5\7\0\1\5\2\0\1\5\5\0\325\5"+
    "\55\11\3\5\7\0\7\11\2\5\12\0\4\5\1\11"+
    "\u0171\5\54\11\16\0\5\5\306\11\13\5\7\0\51\5"+
    "\104\11\7\0\1\11\4\5\12\0\u0156\5\1\11\117\5"+
    "\4\11\1\5\33\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\12\11\1\5\4\11\1\5\1\11\1\5"+
    "\1\11\6\5\1\11\4\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\3\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\2\11\1\5\1\11\2\5\4\11\1\5"+
    "\7\11\1\5\4\11\1\5\4\11\1\5\1\11\1\5"+
    "\12\11\1\5\21\11\5\5\3\11\1\5\5\11\1\5"+
    "\21\11\u0134\5\12\0\6\5\336\11\42\5\65\11\13\5"+
    "\336\11\2\5\u0182\11\16\5\u0131\11\37\5\36\11\342\5"+
    "\113\11\266\5\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\35\0\1\2\1\3\1\4\1\5\1\4"+
    "\1\2\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\26\16\1\1\1\3\1\17\1\5\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\25\1\26\1\5\2\20"+
    "\1\27\1\30\1\31\1\32\1\33\1\17\1\34\1\35"+
    "\1\36\2\37\1\40\1\41\5\5\1\42\1\43\2\5"+
    "\1\44\1\45\1\46\1\5\1\3\2\7\1\5\1\47"+
    "\1\50\2\5\1\51\1\52\1\53\1\3\2\7\1\5"+
    "\1\54\1\55\1\56\1\3\2\7\1\57\5\5\1\3"+
    "\2\7\1\5\1\60\16\16\1\61\14\16\2\0\1\62"+
    "\2\20\2\17\1\37\12\0\1\63\2\0\1\64\2\0"+
    "\1\65\1\0\1\66\5\0\1\67\1\0\30\16\1\70"+
    "\4\16\1\17\1\20\1\71\1\20\3\17\7\0\1\72"+
    "\1\73\2\0\1\74\6\0\7\16\1\75\3\16\1\76"+
    "\4\16\1\77\11\16\1\100\1\16\1\20\3\17\1\101"+
    "\2\0\1\102\2\0\1\103\2\0\1\104\2\0\1\105"+
    "\2\0\2\16\1\106\4\16\1\107\1\110\1\16\1\111"+
    "\4\16\1\112\10\16\1\20\3\17\2\0\1\113\1\114"+
    "\4\0\1\115\2\0\1\16\1\116\1\16\1\117\5\16"+
    "\1\120\3\16\1\121\1\122\1\16\1\123\1\16\1\124"+
    "\1\125\2\17\1\126\1\0\1\127\1\130\2\0\1\131"+
    "\1\0\3\16\1\132\1\16\1\133\2\16\1\134\3\16"+
    "\1\135\1\17\4\0\1\16\1\136\1\137\1\16\1\140"+
    "\1\141\2\16\1\142\1\17\1\143\1\130\1\144\1\145"+
    "\4\16\1\146\1\16\1\147\5\16\1\150\2\16\1\151"+
    "\2\16\1\152\1\16\1\153\15\16\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0880\0\u0880\0\u0900\0\u0940"+
    "\0\u0880\0\u0880\0\u0980\0\u0880\0\u09c0\0\u0880\0\u0880\0\u0a00"+
    "\0\u0880\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0"+
    "\0\u1000\0\u1040\0\u1080\0\u10c0\0\u0880\0\u0880\0\u0880\0\u1100"+
    "\0\u0880\0\u0880\0\u0880\0\u1140\0\u1180\0\u11c0\0\u0880\0\u0880"+
    "\0\u0880\0\u1200\0\u0880\0\u1240\0\u0880\0\u0880\0\u0880\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u0880\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u0880\0\u17c0\0\u1800"+
    "\0\u1840\0\u1880\0\u0880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u0880\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u0940"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u0a40\0\u2100"+
    "\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300"+
    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u0880\0\u2480\0\u24c0"+
    "\0\u2500\0\u2540\0\u0880\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680"+
    "\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u16c0\0\u2800\0\u17c0"+
    "\0\u0880\0\u2840\0\u2880\0\u1900\0\u28c0\0\u1a80\0\u2900\0\u2940"+
    "\0\u2980\0\u29c0\0\u2a00\0\u1cc0\0\u2a40\0\u2a80\0\u2ac0\0\u2b00"+
    "\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00"+
    "\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00"+
    "\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u0a40\0\u3080\0\u30c0"+
    "\0\u3100\0\u3140\0\u0880\0\u0880\0\u10c0\0\u3180\0\u31c0\0\u3200"+
    "\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400"+
    "\0\u3440\0\u0880\0\u3480\0\u34c0\0\u0880\0\u3500\0\u3540\0\u3580"+
    "\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780"+
    "\0\u37c0\0\u3800\0\u0a40\0\u3840\0\u3880\0\u38c0\0\u0a40\0\u3900"+
    "\0\u3940\0\u3980\0\u39c0\0\u0a40\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u0a40\0\u3c40\0\u3c80"+
    "\0\u3cc0\0\u3d00\0\u3d40\0\u0880\0\u3d80\0\u3dc0\0\u0880\0\u3e00"+
    "\0\u3e40\0\u0880\0\u3e80\0\u3ec0\0\u0880\0\u3f00\0\u3f40\0\u0880"+
    "\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u0a40\0\u4080\0\u40c0\0\u4100"+
    "\0\u4140\0\u0a40\0\u0a40\0\u4180\0\u0a40\0\u41c0\0\u4200\0\u4240"+
    "\0\u4280\0\u0a40\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400"+
    "\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600"+
    "\0\u0880\0\u0880\0\u4640\0\u4680\0\u46c0\0\u4700\0\u0880\0\u4740"+
    "\0\u4780\0\u47c0\0\u0a40\0\u4800\0\u0a40\0\u4840\0\u4880\0\u48c0"+
    "\0\u4900\0\u4940\0\u0a40\0\u4980\0\u49c0\0\u4a00\0\u0a40\0\u0a40"+
    "\0\u4a40\0\u0a40\0\u4a80\0\u0a40\0\u10c0\0\u4ac0\0\u4b00\0\u1040"+
    "\0\u4b40\0\u0880\0\u17c0\0\u4b80\0\u4bc0\0\u0880\0\u4c00\0\u4c40"+
    "\0\u4c80\0\u4cc0\0\u0a40\0\u4d00\0\u0a40\0\u4d40\0\u4d80\0\u0a40"+
    "\0\u4dc0\0\u4e00\0\u4e40\0\u1040\0\u4e80\0\u4ec0\0\u4f00\0\u4f40"+
    "\0\u4f80\0\u4fc0\0\u0a40\0\u0a40\0\u5000\0\u0a40\0\u0a40\0\u5040"+
    "\0\u5080\0\u0a40\0\u50c0\0\u0880\0\u0880\0\u0880\0\u4f80\0\u5100"+
    "\0\u5140\0\u5180\0\u51c0\0\u0a40\0\u5200\0\u1040\0\u5240\0\u5280"+
    "\0\u52c0\0\u5300\0\u5340\0\u0a40\0\u5380\0\u53c0\0\u0a40\0\u5400"+
    "\0\u5440\0\u0a40\0\u5480\0\u0a40\0\u54c0\0\u5500\0\u5540\0\u5580"+
    "\0\u55c0\0\u5600\0\u5640\0\u5680\0\u56c0\0\u5700\0\u5740\0\u5780"+
    "\0\u57c0\0\u0a40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\43\1\44\1\45\1\46\1\47\1\43\1\44\10\43"+
    "\1\50\7\43\1\51\45\43\1\46\1\43\2\46\1\44"+
    "\1\52\1\46\1\53\1\46\1\44\1\46\1\54\1\55"+
    "\15\46\1\56\7\55\3\46\30\55\7\46\1\44\1\52"+
    "\1\46\1\53\1\46\1\44\1\57\1\46\1\60\1\46"+
    "\1\61\14\46\7\60\3\46\30\60\7\46\1\44\1\52"+
    "\1\46\1\53\1\46\1\44\2\46\1\62\16\46\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\3\46\1\62"+
    "\1\71\1\62\1\72\1\63\1\73\1\74\1\75\1\62"+
    "\1\76\2\62\1\77\1\100\1\101\1\102\1\103\1\62"+
    "\1\104\1\105\1\106\1\62\1\107\1\62\6\46\1\110"+
    "\1\44\1\52\1\110\1\53\1\110\1\111\71\110\1\46"+
    "\1\44\1\52\1\46\1\53\1\46\1\44\2\46\1\112"+
    "\6\46\1\113\7\46\7\112\3\46\30\112\7\46\1\44"+
    "\1\52\1\46\1\53\1\46\1\44\1\57\1\46\1\114"+
    "\1\46\1\61\1\115\1\116\1\117\1\46\1\120\3\46"+
    "\1\121\1\122\1\123\1\56\7\114\1\124\2\46\6\114"+
    "\1\125\17\114\1\126\1\114\1\127\1\130\1\131\4\46"+
    "\1\44\1\52\1\46\1\53\1\46\1\44\2\46\1\132"+
    "\16\46\7\132\3\46\30\132\6\46\1\43\1\44\1\52"+
    "\1\43\1\53\1\43\1\44\15\43\1\133\53\43\1\46"+
    "\1\44\1\52\1\46\1\53\1\46\1\44\2\46\1\112"+
    "\16\46\7\112\3\46\20\112\1\134\7\112\7\46\1\44"+
    "\1\52\1\46\1\53\1\46\1\44\2\46\1\112\16\46"+
    "\7\112\3\46\30\112\6\46\1\135\1\44\1\52\1\135"+
    "\1\53\1\135\1\44\2\135\1\55\4\135\1\136\5\135"+
    "\1\137\3\135\7\55\3\135\30\55\7\135\1\44\1\52"+
    "\1\135\1\53\1\135\1\44\2\135\1\112\16\135\7\112"+
    "\3\135\30\112\7\135\1\44\1\52\1\135\1\53\1\135"+
    "\1\44\2\135\1\55\4\135\1\136\11\135\7\55\3\135"+
    "\30\55\6\135\7\46\1\140\103\46\1\141\64\46\1\43"+
    "\1\44\1\52\1\43\1\53\1\43\1\44\71\43\1\46"+
    "\1\44\1\52\1\46\1\53\1\46\1\44\2\46\1\142"+
    "\16\46\7\142\3\46\30\142\7\46\2\143\1\46\1\143"+
    "\1\46\1\143\35\46\1\144\3\46\1\145\1\46\1\146"+
    "\7\46\1\147\1\150\15\46\2\151\1\46\1\151\1\46"+
    "\1\151\2\46\1\112\16\46\7\112\3\46\30\112\1\152"+
    "\55\46\1\153\15\46\1\154\12\46\1\44\1\52\1\46"+
    "\1\53\1\46\1\44\3\46\1\155\6\46\3\155\4\46"+
    "\7\155\3\46\30\155\7\46\1\44\1\52\1\46\1\53"+
    "\1\46\1\44\2\46\1\156\16\46\7\156\3\46\30\156"+
    "\7\46\2\157\1\46\1\157\1\46\1\157\30\46\1\160"+
    "\41\46\1\161\1\162\1\46\1\163\1\46\1\161\14\46"+
    "\1\164\55\46\2\165\1\46\1\165\1\46\1\165\1\166"+
    "\12\46\2\167\4\46\7\167\3\46\17\167\1\170\10\167"+
    "\1\171\6\46\2\172\1\46\1\172\1\46\1\172\2\46"+
    "\1\112\16\46\7\112\3\46\30\112\1\173\5\46\100\166"+
    "\1\46\1\174\1\175\1\46\1\176\1\46\1\174\14\46"+
    "\1\177\55\46\2\200\1\46\1\200\1\46\1\200\2\46"+
    "\1\201\16\46\7\201\3\46\30\201\1\202\6\46\2\200"+
    "\1\46\1\200\1\46\1\200\2\46\1\112\16\46\7\112"+
    "\3\46\30\112\7\46\1\203\1\204\1\46\1\205\1\46"+
    "\1\203\2\46\1\206\16\46\7\206\3\46\30\206\7\46"+
    "\1\44\1\52\1\46\1\53\1\46\1\44\35\46\1\207"+
    "\3\46\1\210\1\46\1\211\7\46\1\212\1\213\15\46"+
    "\1\214\1\215\1\46\1\216\1\46\1\214\43\46\1\217"+
    "\25\46\101\0\1\44\4\0\1\44\73\0\1\45\114\0"+
    "\1\220\62\0\1\52\75\0\1\55\10\0\1\55\6\0"+
    "\1\55\1\0\2\55\4\0\7\55\3\0\30\55\3\0"+
    "\1\55\2\0\1\60\10\0\1\60\6\0\1\60\1\0"+
    "\2\60\4\0\7\60\3\0\30\60\3\0\1\60\2\0"+
    "\1\62\10\0\1\62\6\0\1\62\1\0\2\62\4\0"+
    "\7\62\3\0\30\62\3\0\1\62\2\0\1\62\10\0"+
    "\1\62\6\0\1\62\1\0\2\62\4\0\7\62\3\0"+
    "\5\62\1\221\22\62\3\0\1\62\2\0\1\62\10\0"+
    "\1\62\6\0\1\62\1\0\2\62\4\0\7\62\3\0"+
    "\5\62\1\222\22\62\3\0\1\62\2\0\1\62\10\0"+
    "\1\62\6\0\1\62\1\0\2\62\4\0\7\62\3\0"+
    "\1\62\1\223\26\62\3\0\1\62\2\0\1\62\10\0"+
    "\1\62\6\0\1\62\1\0\2\62\4\0\7\62\3\0"+
    "\5\62\1\224\11\62\1\225\10\62\3\0\1\62\2\0"+
    "\1\62\10\0\1\62\6\0\1\62\1\0\2\62\4\0"+
    "\7\62\3\0\5\62\1\226\17\62\1\227\2\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\1\62\1\230\26\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\14\62\1\231\13\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\14\62\1\232\2\62\1\233"+
    "\10\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\16\62\1\234"+
    "\11\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\11\62\1\235"+
    "\16\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\5\62\1\236"+
    "\22\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\16\62\1\237"+
    "\11\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\1\62\1\240"+
    "\26\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\17\62\1\241"+
    "\10\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\1\62\1\242"+
    "\26\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\26\62\1\243"+
    "\1\62\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\62\1\0\2\62\4\0\7\62\3\0\1\62\1\244"+
    "\20\62\1\245\2\62\1\246\2\62\3\0\1\62\2\0"+
    "\1\62\10\0\1\62\6\0\1\62\1\0\2\62\4\0"+
    "\7\62\3\0\5\62\1\247\22\62\3\0\1\62\2\0"+
    "\1\62\10\0\1\62\6\0\1\62\1\0\2\62\4\0"+
    "\7\62\3\0\5\62\1\250\17\62\1\251\2\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\27\62\1\252\3\0\1\62"+
    "\2\0\1\62\10\0\1\62\6\0\1\62\1\0\2\62"+
    "\4\0\7\62\3\0\1\62\1\253\26\62\3\0\1\62"+
    "\2\0\1\110\2\0\1\110\1\0\74\110\1\44\1\0"+
    "\1\110\1\0\1\110\1\111\71\110\1\112\10\0\1\112"+
    "\6\0\1\112\1\0\2\112\4\0\7\112\3\0\30\112"+
    "\3\0\1\112\22\0\1\254\57\0\1\114\10\0\1\114"+
    "\6\0\1\114\1\0\2\114\4\0\7\114\3\0\30\114"+
    "\3\0\1\114\22\0\1\255\120\0\1\256\36\0\1\114"+
    "\10\0\1\114\6\0\1\114\1\0\2\114\4\0\7\114"+
    "\3\0\25\114\1\257\2\114\3\0\1\114\2\0\1\114"+
    "\10\0\1\114\6\0\1\114\1\0\2\114\4\0\7\114"+
    "\3\0\1\114\1\260\26\114\3\0\1\114\2\0\1\132"+
    "\10\0\1\132\6\0\1\132\1\0\2\132\4\0\7\132"+
    "\3\0\30\132\3\0\1\132\2\0\1\112\10\0\1\112"+
    "\6\0\1\112\1\0\2\112\4\0\7\112\3\0\22\112"+
    "\1\261\2\112\1\262\2\112\3\0\1\112\2\0\7\140"+
    "\1\263\30\140\1\264\37\140\13\141\1\263\24\141\1\265"+
    "\37\141\1\142\10\0\1\142\6\0\1\142\1\0\2\142"+
    "\4\0\7\142\3\0\30\142\3\0\1\142\3\0\2\143"+
    "\1\0\1\143\1\0\1\143\152\0\1\266\77\0\1\267"+
    "\65\0\1\270\73\0\1\271\123\0\1\272\11\0\2\151"+
    "\1\0\1\151\1\0\1\151\134\0\1\273\120\0\1\274"+
    "\25\0\1\155\6\0\3\155\4\0\7\155\3\0\30\155"+
    "\6\0\1\156\10\0\1\156\6\0\1\156\1\0\2\156"+
    "\4\0\7\156\3\0\30\156\3\0\1\156\3\0\2\157"+
    "\1\0\1\157\1\0\1\157\121\0\7\275\42\0\1\161"+
    "\1\276\1\0\1\276\1\0\1\161\72\0\2\276\1\0"+
    "\1\276\1\0\1\276\72\0\1\276\1\162\1\0\1\276"+
    "\1\0\1\276\113\0\2\277\55\0\2\165\1\0\1\165"+
    "\1\0\1\165\113\0\2\300\1\301\3\0\7\300\3\0"+
    "\30\300\30\0\2\300\1\301\3\0\7\300\3\0\2\300"+
    "\1\302\25\300\67\0\1\303\17\0\2\172\1\0\1\172"+
    "\1\0\1\172\72\0\1\174\1\304\1\0\1\304\1\0"+
    "\1\174\72\0\2\304\1\0\1\304\1\0\1\304\72\0"+
    "\1\304\1\175\1\0\1\304\1\0\1\304\113\0\2\305"+
    "\55\0\2\200\1\0\1\200\1\0\1\200\71\0\1\201"+
    "\10\0\1\201\6\0\1\201\1\0\2\201\4\0\7\201"+
    "\3\0\30\201\3\0\1\201\3\0\1\203\1\306\1\0"+
    "\1\306\1\0\1\203\72\0\2\306\1\0\1\306\1\0"+
    "\1\306\72\0\1\306\1\204\1\0\1\306\1\0\1\306"+
    "\71\0\1\206\10\0\1\206\6\0\1\206\1\0\2\206"+
    "\4\0\7\206\3\0\30\206\3\0\1\206\63\0\1\307"+
    "\77\0\1\310\65\0\1\311\73\0\1\312\123\0\1\313"+
    "\11\0\1\214\1\314\1\0\1\314\1\0\1\214\72\0"+
    "\2\314\1\0\1\314\1\0\1\314\72\0\1\314\1\215"+
    "\1\0\1\314\1\0\1\314\157\0\1\315\11\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\23\62\1\316\4\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\1\62\1\317\26\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\22\62\1\320\5\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\23\62\1\321\4\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\25\62\1\322\2\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\3\62\1\323\24\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\15\62\1\324\12\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\7\62\1\325\20\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\11\62\1\326\16\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\1\62\1\327\26\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\16\62\1\330\11\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\25\62\1\331\2\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\5\62\1\332\22\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\16\62\1\333\11\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\16\62\1\334\11\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\4\62\1\335\23\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\15\62\1\336\12\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\5\62\1\337\22\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\22\62\1\340\5\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\11\62\1\341\5\62\1\342\10\62\3\0\1\62"+
    "\2\0\1\62\10\0\1\62\6\0\1\62\1\0\2\62"+
    "\4\0\7\62\3\0\2\62\1\343\25\62\3\0\1\62"+
    "\2\0\1\62\10\0\1\62\6\0\1\62\1\0\2\62"+
    "\4\0\7\62\3\0\24\62\1\344\3\62\3\0\1\62"+
    "\2\0\1\62\10\0\1\62\6\0\1\62\1\0\2\62"+
    "\4\0\7\62\3\0\3\62\1\345\1\62\1\346\14\62"+
    "\1\347\5\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\20\62"+
    "\1\350\7\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\20\62"+
    "\1\351\7\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\22\62"+
    "\1\352\5\62\3\0\1\62\22\0\1\353\77\0\1\354"+
    "\57\0\1\114\10\0\1\114\6\0\1\114\1\0\2\114"+
    "\4\0\7\114\3\0\16\114\1\355\11\114\3\0\1\114"+
    "\2\0\1\114\10\0\1\114\6\0\1\114\1\0\2\114"+
    "\4\0\7\114\3\0\22\114\1\356\5\114\3\0\1\114"+
    "\2\0\1\112\10\0\1\112\6\0\1\112\1\0\2\112"+
    "\4\0\7\112\3\0\11\112\1\357\5\112\1\360\10\112"+
    "\3\0\1\112\2\0\1\112\10\0\1\112\6\0\1\112"+
    "\1\0\2\112\4\0\7\112\3\0\2\112\1\361\25\112"+
    "\3\0\1\112\2\0\1\140\1\0\1\140\1\0\2\140"+
    "\1\0\66\140\2\0\1\140\1\141\1\0\1\141\1\0"+
    "\2\141\1\0\66\141\2\0\1\141\46\0\1\362\115\0"+
    "\1\363\56\0\1\364\122\0\1\365\60\0\1\366\106\0"+
    "\1\367\110\0\1\370\40\0\7\275\2\0\1\371\60\0"+
    "\2\372\76\0\2\300\1\301\3\0\7\300\3\0\12\300"+
    "\1\373\15\300\52\0\1\374\55\0\2\375\122\0\1\376"+
    "\115\0\1\377\56\0\1\u0100\122\0\1\u0101\60\0\1\u0102"+
    "\116\0\1\u0103\11\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\3\62\1\u0104\24\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\4\62\1\u0105\23\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\1\62\1\u0106\26\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\20\62\1\u0107\7\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\24\62\1\u0108\3\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\25\62\1\u0109\2\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\15\62\1\u010a\12\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\23\62\1\u010b\4\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\1\62\1\u010c\26\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\23\62\1\u010d\4\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\24\62\1\u010e\3\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\15\62\1\u010f\12\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\14\62\1\u0110\13\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\5\62\1\u0111\22\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\7\62\1\u0112\20\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\25\62\1\u0113\2\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\5\62\1\u0114\22\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\22\62\1\u0115\5\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\1\62\1\u0116\26\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\26\62\1\u0117\1\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\24\62\1\u0118\3\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\14\62\1\u0119\13\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\25\62\1\u011a\2\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\25\62\1\u011b\2\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\26\62\1\u011c\1\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\20\62\1\u011d\7\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\5\62\1\u011e\22\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\1\62\1\u011f\26\62"+
    "\3\0\1\62\2\0\1\114\10\0\1\114\6\0\1\114"+
    "\1\0\2\114\4\0\7\114\3\0\1\114\1\u0120\26\114"+
    "\3\0\1\114\2\0\1\112\10\0\1\112\6\0\1\112"+
    "\1\0\2\112\4\0\7\112\3\0\26\112\1\u0121\1\112"+
    "\3\0\1\112\2\0\1\112\10\0\1\112\6\0\1\112"+
    "\1\0\2\112\4\0\7\112\3\0\24\112\1\u0122\3\112"+
    "\3\0\1\112\2\0\1\112\10\0\1\112\6\0\1\112"+
    "\1\0\2\112\4\0\7\112\3\0\14\112\1\u0123\13\112"+
    "\3\0\1\112\73\0\1\u0124\65\0\1\u0125\66\0\1\u0126"+
    "\103\0\1\u0127\111\0\1\u0128\100\0\1\u0129\61\0\1\u012a"+
    "\71\0\1\371\60\0\2\300\1\301\3\0\7\300\3\0"+
    "\5\300\1\u012b\22\300\62\0\1\u012c\114\0\1\u012d\65\0"+
    "\1\u012e\66\0\1\u012f\103\0\1\u0130\111\0\1\u0131\75\0"+
    "\1\u0132\15\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\22\62\1\u0133\5\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\5\62\1\u0134\22\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\15\62\1\u0135\12\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\17\62\1\u0136\10\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\5\62\1\u0137\22\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\22\62\1\u0138\5\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\1\62\1\u0139\26\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\23\62\1\u013a\4\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\23\62\1\u013b\4\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\1\62\1\u013c\26\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\4\62\1\u013d\23\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\22\62\1\u013e\5\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\25\62\1\u013f\2\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\14\62\1\u0140\13\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\14\62\1\u0141\13\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\15\62\1\u0142\12\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\1\62\1\u0143\26\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\5\62\1\u0144\22\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\11\62\1\u0145\16\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\22\62\1\u0146\5\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\22\62\1\u0147\5\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\5\62\1\u0148\22\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\22\62\1\u0149\5\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\22\62\1\u014a\5\62\3\0"+
    "\1\62\2\0\1\114\10\0\1\114\6\0\1\114\1\0"+
    "\2\114\4\0\7\114\3\0\22\114\1\u014b\5\114\3\0"+
    "\1\114\2\0\1\112\10\0\1\112\6\0\1\112\1\0"+
    "\2\112\4\0\7\112\3\0\1\112\1\u014c\26\112\3\0"+
    "\1\112\2\0\1\112\10\0\1\112\6\0\1\112\1\0"+
    "\2\112\4\0\7\112\3\0\5\112\1\u014d\22\112\3\0"+
    "\1\112\2\0\1\112\10\0\1\112\6\0\1\112\1\0"+
    "\2\112\4\0\7\112\3\0\11\112\1\u014e\16\112\3\0"+
    "\1\112\33\0\1\u014f\115\0\1\u0150\121\0\1\u0151\55\0"+
    "\1\u0152\52\0\2\300\1\301\3\0\7\300\3\0\3\300"+
    "\1\u0153\24\300\55\0\1\u0154\61\0\1\u0155\115\0\1\u0156"+
    "\121\0\1\u0157\32\0\1\u0158\40\0\1\u0159\12\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\11\62\1\u015a\16\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\22\62\1\u015b\5\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\16\62\1\u015c\11\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\22\62\1\u015d\5\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\11\62\1\u015e\16\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\22\62\1\u015f\5\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\3\62\1\u0160\24\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\11\62\1\u0161\16\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\1\62\1\u0162\26\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\5\62\1\u0163\22\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\17\62\1\u0164\10\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\24\62\1\u0165\3\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\3\62\1\u0166\24\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\3\62\1\u0167\24\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\16\62\1\u0168\11\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\11\62\1\u0169\16\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\22\62\1\u016a\5\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\5\62\1\u016b\22\62\3\0\1\62\2\0\1\62"+
    "\10\0\1\62\6\0\1\62\1\0\2\62\4\0\7\62"+
    "\3\0\7\62\1\u016c\20\62\3\0\1\62\2\0\1\114"+
    "\10\0\1\114\6\0\1\114\1\0\2\114\4\0\7\114"+
    "\3\0\7\114\1\u016d\20\114\3\0\1\114\2\0\1\112"+
    "\10\0\1\112\6\0\1\112\1\0\2\112\4\0\7\112"+
    "\3\0\24\112\1\u016e\3\112\3\0\1\112\2\0\1\112"+
    "\10\0\1\112\6\0\1\112\1\0\2\112\4\0\7\112"+
    "\3\0\3\112\1\u016f\24\112\3\0\1\112\2\0\1\112"+
    "\10\0\1\112\6\0\1\112\1\0\2\112\4\0\7\112"+
    "\3\0\3\112\1\u0170\24\112\3\0\1\112\45\0\1\u0171"+
    "\120\0\1\u0172\35\0\2\300\1\301\3\0\7\300\3\0"+
    "\24\300\1\u0173\3\300\53\0\1\u0174\75\0\1\u0175\120\0"+
    "\1\u0176\34\0\1\u0177\102\0\1\u0158\53\0\1\62\10\0"+
    "\1\62\6\0\1\62\1\0\2\62\4\0\7\62\3\0"+
    "\20\62\1\u0178\7\62\3\0\1\62\2\0\1\62\10\0"+
    "\1\62\6\0\1\62\1\0\2\62\4\0\7\62\3\0"+
    "\23\62\1\u0179\4\62\3\0\1\62\2\0\1\62\10\0"+
    "\1\62\6\0\1\62\1\0\2\62\4\0\7\62\3\0"+
    "\24\62\1\u017a\3\62\3\0\1\62\2\0\1\62\10\0"+
    "\1\62\6\0\1\62\1\0\2\62\4\0\7\62\3\0"+
    "\27\62\1\u017b\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\24\62"+
    "\1\u017c\3\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\3\62"+
    "\1\u017d\24\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\7\62"+
    "\1\u017e\20\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\1\62"+
    "\1\u017f\26\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\5\62"+
    "\1\u0180\22\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\24\62"+
    "\1\u0181\3\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\24\62"+
    "\1\u0182\3\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\23\62"+
    "\1\u0183\4\62\3\0\1\62\2\0\1\112\10\0\1\112"+
    "\6\0\1\112\1\0\2\112\4\0\7\112\3\0\5\112"+
    "\1\u0184\22\112\3\0\1\112\2\0\1\112\10\0\1\112"+
    "\6\0\1\112\1\0\2\112\4\0\7\112\3\0\24\112"+
    "\1\u0185\3\112\3\0\1\112\70\0\1\u0186\77\0\1\u0187"+
    "\77\0\1\u0188\32\0\1\u0189\56\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\24\62"+
    "\1\u018a\3\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\5\62"+
    "\1\u018b\22\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\27\62"+
    "\1\u018c\3\0\1\62\2\0\1\62\10\0\1\62\6\0"+
    "\1\u018d\1\0\2\62\4\0\7\62\3\0\30\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\5\62\1\u018e\22\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\4\62\1\u018f\23\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\5\62\1\u0190\22\62\3\0"+
    "\1\62\2\0\1\62\10\0\1\62\6\0\1\62\1\0"+
    "\2\62\4\0\7\62\3\0\27\62\1\u0191\3\0\1\62"+
    "\2\0\1\62\10\0\1\62\6\0\1\62\1\0\2\62"+
    "\4\0\7\62\3\0\23\62\1\u0192\4\62\3\0\1\62"+
    "\2\0\1\112\10\0\1\112\6\0\1\112\1\0\2\112"+
    "\4\0\7\112\3\0\5\112\1\u0193\22\112\3\0\1\112"+
    "\45\0\1\u0194\130\0\1\u0195\46\0\1\u0196\46\0\1\u0197"+
    "\4\0\6\u0197\3\0\7\u0197\1\0\1\u0197\1\0\30\u0197"+
    "\6\0\1\62\10\0\1\62\6\0\1\62\1\0\2\62"+
    "\4\0\7\62\3\0\11\62\1\u0198\16\62\3\0\1\62"+
    "\2\0\1\62\10\0\1\62\6\0\1\62\1\0\2\62"+
    "\4\0\7\62\3\0\5\62\1\u0199\10\62\1\u019a\6\62"+
    "\1\u019b\2\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\4\62"+
    "\1\u019c\23\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\1\62\1\u019d\5\62"+
    "\3\0\30\62\3\0\1\62\2\0\1\112\10\0\1\112"+
    "\6\0\1\112\1\0\2\112\4\0\7\112\3\0\4\112"+
    "\1\u019e\23\112\3\0\1\112\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\17\62"+
    "\1\u019f\10\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\15\62"+
    "\1\u01a0\12\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\1\62"+
    "\1\u01a1\26\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\22\62"+
    "\1\u01a2\5\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\5\62"+
    "\1\u01a3\22\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\16\62"+
    "\1\u01a4\11\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\1\62"+
    "\1\u01a5\26\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\15\62"+
    "\1\u01a6\12\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\14\62"+
    "\1\u01a7\13\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\6\62"+
    "\1\u01a8\21\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\11\62"+
    "\1\u01a9\16\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\5\62"+
    "\1\u01aa\22\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\11\62"+
    "\1\u01ab\16\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\14\62"+
    "\1\u01ac\13\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\16\62"+
    "\1\u01ad\11\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\11\62"+
    "\1\u01ae\16\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\24\62"+
    "\1\u01af\3\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\11\62"+
    "\1\u01b0\16\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\17\62"+
    "\1\u01b1\10\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\16\62"+
    "\1\u01b2\11\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\62\1\0\2\62\4\0\7\62\3\0\23\62"+
    "\1\u01b3\4\62\3\0\1\62\2\0\1\62\10\0\1\62"+
    "\6\0\1\u01b4\1\0\2\62\4\0\7\62\3\0\30\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\1\62\1\u01b5\26\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\20\62\1\u01b6\7\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\11\62\1\u01b7\16\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\13\62\1\u01b8\14\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\5\62\1\u01b9\22\62"+
    "\3\0\1\62\2\0\1\62\10\0\1\62\6\0\1\62"+
    "\1\0\2\62\4\0\7\62\3\0\27\62\1\u01ba\3\0"+
    "\1\62\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22528];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\35\0\1\11\1\1\2\11\2\1\2\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\33\1\3\11"+
    "\1\1\3\11\3\1\3\11\1\1\1\11\1\1\3\11"+
    "\12\1\1\11\13\1\1\11\4\1\1\11\6\1\1\11"+
    "\51\1\2\0\1\11\4\1\1\11\12\0\1\1\2\0"+
    "\1\11\2\0\1\1\1\0\1\1\5\0\1\1\1\0"+
    "\35\1\2\11\5\1\7\0\1\1\1\11\2\0\1\11"+
    "\6\0\40\1\1\11\2\0\1\11\2\0\1\11\2\0"+
    "\1\11\2\0\1\11\2\0\34\1\2\0\2\11\4\0"+
    "\1\11\2\0\27\1\1\0\1\11\1\1\2\0\1\11"+
    "\1\0\16\1\4\0\12\1\3\11\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    private Stack<Integer> _stack = new Stack<>();
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void pushState(int state) {
        _stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        var state = _stack.pop();
        yybegin(state);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 109: break;
          case 2:
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            }
          // fall through
          case 110: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 111: break;
          case 4:
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 112: break;
          case 5:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 113: break;
          case 6:
            { yybegin(xTAG_NAME); return AT;
            }
          // fall through
          case 114: break;
          case 7:
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 115: break;
          case 8:
            { return SHARP;
            }
          // fall through
          case 116: break;
          case 9:
            { return ID;
            }
          // fall through
          case 117: break;
          case 10:
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            }
          // fall through
          case 118: break;
          case 11:
            { pushState(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 119: break;
          case 12:
            { yybegin(xCOMMENT_STRING); return ID;
            }
          // fall through
          case 120: break;
          case 13:
            { pushState(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 121: break;
          case 14:
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            }
          // fall through
          case 122: break;
          case 15:
            { beginType(); return ID;
            }
          // fall through
          case 123: break;
          case 16:
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            }
          // fall through
          case 124: break;
          case 17:
            { _typeLevel++; return LPAREN;
            }
          // fall through
          case 125: break;
          case 18:
            { _typeLevel--; _typeReq = false; return RPAREN;
            }
          // fall through
          case 126: break;
          case 19:
            { _typeReq = true; return COMMA;
            }
          // fall through
          case 127: break;
          case 20:
            { _typeReq = true; return EXTENDS;
            }
          // fall through
          case 128: break;
          case 21:
            { _typeLevel++; return LT;
            }
          // fall through
          case 129: break;
          case 22:
            { _typeLevel--; _typeReq = false; return GT;
            }
          // fall through
          case 130: break;
          case 23:
            { _typeLevel++; return LCURLY;
            }
          // fall through
          case 131: break;
          case 24:
            { _typeReq = true; return OR;
            }
          // fall through
          case 132: break;
          case 25:
            { _typeLevel--; _typeReq = false; return RCURLY;
            }
          // fall through
          case 133: break;
          case 26:
            { yybegin(xCLASS_EXTEND); return ID;
            }
          // fall through
          case 134: break;
          case 27:
            { beginType(); return EXTENDS;
            }
          // fall through
          case 135: break;
          case 28:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 136: break;
          case 29:
            { return COMMA;
            }
          // fall through
          case 137: break;
          case 30:
            { return EXTENDS;
            }
          // fall through
          case 138: break;
          case 31:
            { popState(); return STRING_LITERAL;
            }
          // fall through
          case 139: break;
          case 32:
            { yybegin(xSWAG_QUERY_TYPE); return SWAGGER_PARAM_NME;
            }
          // fall through
          case 140: break;
          case 33:
            { yybegin(xSWAG_QUERY_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 141: break;
          case 34:
            { yybegin(xSWAG_QUERY_TY); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 142: break;
          case 35:
            { yybegin(xSWAG_QUERY_TY); return LCURLY;
            }
          // fall through
          case 143: break;
          case 36:
            { yybegin(xSWAG_METHOD); return  URL;
            }
          // fall through
          case 144: break;
          case 37:
            { yybegin(YYINITIAL); return SWAGGER_SIGN_NME;
            }
          // fall through
          case 145: break;
          case 38:
            { yybegin(xSWAG_METHOD); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 146: break;
          case 39:
            { yybegin(xSWAG_RESPONSE_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 147: break;
          case 40:
            { yybegin(xCOMMENT_STRING); return SWAG_NOTE;
            }
          // fall through
          case 148: break;
          case 41:
            { yybegin(xSWAG_RESPONSE_TY);   return LCURLY;
            }
          // fall through
          case 149: break;
          case 42:
            { yybegin(xSWAG_RESPONSE_TY); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 150: break;
          case 43:
            { yybegin(xSWAG_RESPONSE_TY); return LCURLY;
            }
          // fall through
          case 151: break;
          case 44:
            { yybegin(xSWAG_HEADER_TYPE); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 152: break;
          case 45:
            { beginType();   return ID;
            }
          // fall through
          case 153: break;
          case 46:
            { yybegin(xSWAG_HEADER_TY);   return LCURLY;
            }
          // fall through
          case 154: break;
          case 47:
            { yybegin(YYINITIAL); return ID;
            }
          // fall through
          case 155: break;
          case 48:
            { return DASHES;
            }
          // fall through
          case 156: break;
          case 49:
            { yybegin(xSWAG_QUERY_COMMY_TY); return TAG_NAME_SWAG_SIGN_IN;
            }
          // fall through
          case 157: break;
          case 50:
            { _typeReq = false; return ARR;
            }
          // fall through
          case 158: break;
          case 51:
            { yybegin(xSWAG_RESPONSE); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 159: break;
          case 52:
            { yybegin(xSWAG_RESPONSE_TYPE); return SWAG_RES_KEY;
            }
          // fall through
          case 160: break;
          case 53:
            { yybegin(xSWAG_HEADER); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 161: break;
          case 54:
            { yybegin(xSWAG_SIGN_NAME); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 162: break;
          case 55:
            { yybegin(xCOMMENT_STRING); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 163: break;
          case 56:
            { yybegin(xTAG); return TAG_NAME_SEE;
            }
          // fall through
          case 164: break;
          case 57:
            { return FUN;
            }
          // fall through
          case 165: break;
          case 58:
            { return  HTTP_METHOD_SWAG;
            }
          // fall through
          case 166: break;
          case 59:
            { yybegin(xSWAG_RESPONSE_TYPE); return SWAG_HTTPSTATUS;
            }
          // fall through
          case 167: break;
          case 60:
            { yybegin(xSWAG_HEADER_TYPE); return SWAG_HTTPSTATUS;
            }
          // fall through
          case 168: break;
          case 61:
            { yybegin(xSWAG_TAGS); return TAG_NAME_SWAGTAGS;
            }
          // fall through
          case 169: break;
          case 62:
            { yybegin(xCLASS); return TAG_NAME_ENUM;
            }
          // fall through
          case 170: break;
          case 63:
            { yybegin(xSWAG_SIGN_NAME); return TAG_NAME_SWAG_SIGN_NAME;
            }
          // fall through
          case 171: break;
          case 64:
            { beginType(); return TAG_NAME_TYPE;
            }
          // fall through
          case 172: break;
          case 65:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_BODY;
            }
          // fall through
          case 173: break;
          case 66:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_PATH;
            }
          // fall through
          case 174: break;
          case 67:
            { yybegin(xCOMMENT_STRING); return SWAGPARAM_TRUE;
            }
          // fall through
          case 175: break;
          case 68:
            { return SWAGPARAM_BODY;
            }
          // fall through
          case 176: break;
          case 69:
            { return SWAGPARAM_PATH;
            }
          // fall through
          case 177: break;
          case 70:
            { yybegin(xSWAG_PARAMS); return TAG_NAME_SWAGPARAM;
            }
          // fall through
          case 178: break;
          case 71:
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            }
          // fall through
          case 179: break;
          case 72:
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            }
          // fall through
          case 180: break;
          case 73:
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            }
          // fall through
          case 181: break;
          case 74:
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            }
          // fall through
          case 182: break;
          case 75:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_QUERY;
            }
          // fall through
          case 183: break;
          case 76:
            { yybegin(xCOMMENT_STRING); return SWAGPARAM_FALSE;
            }
          // fall through
          case 184: break;
          case 77:
            { return SWAGPARAM_QUERY;
            }
          // fall through
          case 185: break;
          case 78:
            { yybegin(xSWAG_HEADER); return TAG_NAME_HEADER;
            }
          // fall through
          case 186: break;
          case 79:
            { yybegin(xSWAG_ROUTER); return TAG_NAME_SWAGROUTER;
            }
          // fall through
          case 187: break;
          case 80:
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            }
          // fall through
          case 188: break;
          case 81:
            { return TAG_NAME_PUBLIC;
            }
          // fall through
          case 189: break;
          case 82:
            { beginType(); return TAG_NAME_RETURN;
            }
          // fall through
          case 190: break;
          case 83:
            { yybegin(xSWAG_SERVER); return TAG_NAME_SERVER;
            }
          // fall through
          case 191: break;
          case 84:
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            }
          // fall through
          case 192: break;
          case 85:
            { _typeReq = true; return VARARG;
            }
          // fall through
          case 193: break;
          case 86:
            { yybegin(xFIELD_ID); return PUBLIC;
            }
          // fall through
          case 194: break;
          case 87:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_HEADER;
            }
          // fall through
          case 195: break;
          case 88:
            { yybegin(xSWAG_RESPONSE_TYPE); return SWAGRES_TYPE_OBJ;
            }
          // fall through
          case 196: break;
          case 89:
            { return SWAGPARAM_HEADER;
            }
          // fall through
          case 197: break;
          case 90:
            { yybegin(xSWAG_SUMMARY); return TAG_NAME_SWAGSUMMARY;
            }
          // fall through
          case 198: break;
          case 91:
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            }
          // fall through
          case 199: break;
          case 92:
            { return TAG_NAME_PRIVATE;
            }
          // fall through
          case 200: break;
          case 93:
            { yybegin(xFIELD_ID); return PRIVATE;
            }
          // fall through
          case 201: break;
          case 94:
            { yybegin(xSWAG_RESPONSE);  return TAG_NAME_SWAGRES;
            }
          // fall through
          case 202: break;
          case 95:
            { yybegin(xSWAG_SIGN); return TAG_NAME_SIGN;
            }
          // fall through
          case 203: break;
          case 96:
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            }
          // fall through
          case 204: break;
          case 97:
            { beginType(); return TAG_NAME_OVERLOAD;
            }
          // fall through
          case 205: break;
          case 98:
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            }
          // fall through
          case 206: break;
          case 99:
            { yybegin(xSWAG_QUERY_TY); return SWAGPARAM_FORM;
            }
          // fall through
          case 207: break;
          case 100:
            { return SWAGPARAM_FORM;
            }
          // fall through
          case 208: break;
          case 101:
            { yybegin(xCOMMENT_STRING); return HTTPURL;
            }
          // fall through
          case 209: break;
          case 102:
            { return TAG_NAME_PROTECTED;
            }
          // fall through
          case 210: break;
          case 103:
            { yybegin(xFIELD_ID); return PROTECTED;
            }
          // fall through
          case 211: break;
          case 104:
            { yybegin(xSWAG_DES); return TAG_NAME_SWAGDES;
            }
          // fall through
          case 212: break;
          case 105:
            { yybegin(xCOMMENT_STRING); return TAG_NAME_SWAG_CONTACT_URL;
            }
          // fall through
          case 213: break;
          case 106:
            { yybegin(xCOMMENT_STRING); return TAG_NAME_SWAG_CONTACT_NAME;
            }
          // fall through
          case 214: break;
          case 107:
            { yybegin(xCOMMENT_STRING); return TAG_NAME_SWAG_CONTACT_EMAIL;
            }
          // fall through
          case 215: break;
          case 108:
            { yybegin(xSWAG_SIGN); return TAG_NAME_SWAG_SIGN_API;
            }
          // fall through
          case 216: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
